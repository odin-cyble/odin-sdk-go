// Code generated by go-swagger; DO NOT EDIT.

package certificate

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cybledev/odin-sdk-go/models"
)

// GetV1CertificatesHashReader is a Reader for the GetV1CertificatesHash structure.
type GetV1CertificatesHashReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetV1CertificatesHashReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetV1CertificatesHashOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetV1CertificatesHashBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 402:
		result := NewGetV1CertificatesHashPaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetV1CertificatesHashRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetV1CertificatesHashInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/certificates/{hash}] GetV1CertificatesHash", response, response.Code())
	}
}

// NewGetV1CertificatesHashOK creates a GetV1CertificatesHashOK with default headers values
func NewGetV1CertificatesHashOK() *GetV1CertificatesHashOK {
	return &GetV1CertificatesHashOK{}
}

/*
GetV1CertificatesHashOK describes a response with status code 200, with default header values.

OK
*/
type GetV1CertificatesHashOK struct {
	Payload *models.CertificateCertificateHashResponse
}

// IsSuccess returns true when this get v1 certificates hash o k response has a 2xx status code
func (o *GetV1CertificatesHashOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get v1 certificates hash o k response has a 3xx status code
func (o *GetV1CertificatesHashOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 certificates hash o k response has a 4xx status code
func (o *GetV1CertificatesHashOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get v1 certificates hash o k response has a 5xx status code
func (o *GetV1CertificatesHashOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 certificates hash o k response a status code equal to that given
func (o *GetV1CertificatesHashOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get v1 certificates hash o k response
func (o *GetV1CertificatesHashOK) Code() int {
	return 200
}

func (o *GetV1CertificatesHashOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/certificates/{hash}][%d] getV1CertificatesHashOK %s", 200, payload)
}

func (o *GetV1CertificatesHashOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/certificates/{hash}][%d] getV1CertificatesHashOK %s", 200, payload)
}

func (o *GetV1CertificatesHashOK) GetPayload() *models.CertificateCertificateHashResponse {
	return o.Payload
}

func (o *GetV1CertificatesHashOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateCertificateHashResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1CertificatesHashBadRequest creates a GetV1CertificatesHashBadRequest with default headers values
func NewGetV1CertificatesHashBadRequest() *GetV1CertificatesHashBadRequest {
	return &GetV1CertificatesHashBadRequest{}
}

/*
GetV1CertificatesHashBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetV1CertificatesHashBadRequest struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this get v1 certificates hash bad request response has a 2xx status code
func (o *GetV1CertificatesHashBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 certificates hash bad request response has a 3xx status code
func (o *GetV1CertificatesHashBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 certificates hash bad request response has a 4xx status code
func (o *GetV1CertificatesHashBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 certificates hash bad request response has a 5xx status code
func (o *GetV1CertificatesHashBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 certificates hash bad request response a status code equal to that given
func (o *GetV1CertificatesHashBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get v1 certificates hash bad request response
func (o *GetV1CertificatesHashBadRequest) Code() int {
	return 400
}

func (o *GetV1CertificatesHashBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/certificates/{hash}][%d] getV1CertificatesHashBadRequest %s", 400, payload)
}

func (o *GetV1CertificatesHashBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/certificates/{hash}][%d] getV1CertificatesHashBadRequest %s", 400, payload)
}

func (o *GetV1CertificatesHashBadRequest) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *GetV1CertificatesHashBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1CertificatesHashPaymentRequired creates a GetV1CertificatesHashPaymentRequired with default headers values
func NewGetV1CertificatesHashPaymentRequired() *GetV1CertificatesHashPaymentRequired {
	return &GetV1CertificatesHashPaymentRequired{}
}

/*
GetV1CertificatesHashPaymentRequired describes a response with status code 402, with default header values.

Payment Required
*/
type GetV1CertificatesHashPaymentRequired struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this get v1 certificates hash payment required response has a 2xx status code
func (o *GetV1CertificatesHashPaymentRequired) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 certificates hash payment required response has a 3xx status code
func (o *GetV1CertificatesHashPaymentRequired) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 certificates hash payment required response has a 4xx status code
func (o *GetV1CertificatesHashPaymentRequired) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 certificates hash payment required response has a 5xx status code
func (o *GetV1CertificatesHashPaymentRequired) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 certificates hash payment required response a status code equal to that given
func (o *GetV1CertificatesHashPaymentRequired) IsCode(code int) bool {
	return code == 402
}

// Code gets the status code for the get v1 certificates hash payment required response
func (o *GetV1CertificatesHashPaymentRequired) Code() int {
	return 402
}

func (o *GetV1CertificatesHashPaymentRequired) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/certificates/{hash}][%d] getV1CertificatesHashPaymentRequired %s", 402, payload)
}

func (o *GetV1CertificatesHashPaymentRequired) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/certificates/{hash}][%d] getV1CertificatesHashPaymentRequired %s", 402, payload)
}

func (o *GetV1CertificatesHashPaymentRequired) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *GetV1CertificatesHashPaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1CertificatesHashRequestTimeout creates a GetV1CertificatesHashRequestTimeout with default headers values
func NewGetV1CertificatesHashRequestTimeout() *GetV1CertificatesHashRequestTimeout {
	return &GetV1CertificatesHashRequestTimeout{}
}

/*
GetV1CertificatesHashRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type GetV1CertificatesHashRequestTimeout struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this get v1 certificates hash request timeout response has a 2xx status code
func (o *GetV1CertificatesHashRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 certificates hash request timeout response has a 3xx status code
func (o *GetV1CertificatesHashRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 certificates hash request timeout response has a 4xx status code
func (o *GetV1CertificatesHashRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 certificates hash request timeout response has a 5xx status code
func (o *GetV1CertificatesHashRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 certificates hash request timeout response a status code equal to that given
func (o *GetV1CertificatesHashRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the get v1 certificates hash request timeout response
func (o *GetV1CertificatesHashRequestTimeout) Code() int {
	return 408
}

func (o *GetV1CertificatesHashRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/certificates/{hash}][%d] getV1CertificatesHashRequestTimeout %s", 408, payload)
}

func (o *GetV1CertificatesHashRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/certificates/{hash}][%d] getV1CertificatesHashRequestTimeout %s", 408, payload)
}

func (o *GetV1CertificatesHashRequestTimeout) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *GetV1CertificatesHashRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1CertificatesHashInternalServerError creates a GetV1CertificatesHashInternalServerError with default headers values
func NewGetV1CertificatesHashInternalServerError() *GetV1CertificatesHashInternalServerError {
	return &GetV1CertificatesHashInternalServerError{}
}

/*
GetV1CertificatesHashInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetV1CertificatesHashInternalServerError struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this get v1 certificates hash internal server error response has a 2xx status code
func (o *GetV1CertificatesHashInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 certificates hash internal server error response has a 3xx status code
func (o *GetV1CertificatesHashInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 certificates hash internal server error response has a 4xx status code
func (o *GetV1CertificatesHashInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get v1 certificates hash internal server error response has a 5xx status code
func (o *GetV1CertificatesHashInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get v1 certificates hash internal server error response a status code equal to that given
func (o *GetV1CertificatesHashInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get v1 certificates hash internal server error response
func (o *GetV1CertificatesHashInternalServerError) Code() int {
	return 500
}

func (o *GetV1CertificatesHashInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/certificates/{hash}][%d] getV1CertificatesHashInternalServerError %s", 500, payload)
}

func (o *GetV1CertificatesHashInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/certificates/{hash}][%d] getV1CertificatesHashInternalServerError %s", 500, payload)
}

func (o *GetV1CertificatesHashInternalServerError) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *GetV1CertificatesHashInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
