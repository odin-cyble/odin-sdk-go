// Code generated by go-swagger; DO NOT EDIT.

package certificate

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cybledev/odin-sdk-go/models"
)

// PostV1CertificatesCountReader is a Reader for the PostV1CertificatesCount structure.
type PostV1CertificatesCountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostV1CertificatesCountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostV1CertificatesCountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostV1CertificatesCountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 402:
		result := NewPostV1CertificatesCountPaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostV1CertificatesCountRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostV1CertificatesCountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/certificates/count] PostV1CertificatesCount", response, response.Code())
	}
}

// NewPostV1CertificatesCountOK creates a PostV1CertificatesCountOK with default headers values
func NewPostV1CertificatesCountOK() *PostV1CertificatesCountOK {
	return &PostV1CertificatesCountOK{}
}

/*
PostV1CertificatesCountOK describes a response with status code 200, with default header values.

OK
*/
type PostV1CertificatesCountOK struct {
	Payload *PostV1CertificatesCountOKBody
}

// IsSuccess returns true when this post v1 certificates count o k response has a 2xx status code
func (o *PostV1CertificatesCountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post v1 certificates count o k response has a 3xx status code
func (o *PostV1CertificatesCountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 certificates count o k response has a 4xx status code
func (o *PostV1CertificatesCountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v1 certificates count o k response has a 5xx status code
func (o *PostV1CertificatesCountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 certificates count o k response a status code equal to that given
func (o *PostV1CertificatesCountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post v1 certificates count o k response
func (o *PostV1CertificatesCountOK) Code() int {
	return 200
}

func (o *PostV1CertificatesCountOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/count][%d] postV1CertificatesCountOK %s", 200, payload)
}

func (o *PostV1CertificatesCountOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/count][%d] postV1CertificatesCountOK %s", 200, payload)
}

func (o *PostV1CertificatesCountOK) GetPayload() *PostV1CertificatesCountOKBody {
	return o.Payload
}

func (o *PostV1CertificatesCountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostV1CertificatesCountOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1CertificatesCountBadRequest creates a PostV1CertificatesCountBadRequest with default headers values
func NewPostV1CertificatesCountBadRequest() *PostV1CertificatesCountBadRequest {
	return &PostV1CertificatesCountBadRequest{}
}

/*
PostV1CertificatesCountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostV1CertificatesCountBadRequest struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this post v1 certificates count bad request response has a 2xx status code
func (o *PostV1CertificatesCountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 certificates count bad request response has a 3xx status code
func (o *PostV1CertificatesCountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 certificates count bad request response has a 4xx status code
func (o *PostV1CertificatesCountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 certificates count bad request response has a 5xx status code
func (o *PostV1CertificatesCountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 certificates count bad request response a status code equal to that given
func (o *PostV1CertificatesCountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post v1 certificates count bad request response
func (o *PostV1CertificatesCountBadRequest) Code() int {
	return 400
}

func (o *PostV1CertificatesCountBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/count][%d] postV1CertificatesCountBadRequest %s", 400, payload)
}

func (o *PostV1CertificatesCountBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/count][%d] postV1CertificatesCountBadRequest %s", 400, payload)
}

func (o *PostV1CertificatesCountBadRequest) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *PostV1CertificatesCountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1CertificatesCountPaymentRequired creates a PostV1CertificatesCountPaymentRequired with default headers values
func NewPostV1CertificatesCountPaymentRequired() *PostV1CertificatesCountPaymentRequired {
	return &PostV1CertificatesCountPaymentRequired{}
}

/*
PostV1CertificatesCountPaymentRequired describes a response with status code 402, with default header values.

Payment Required
*/
type PostV1CertificatesCountPaymentRequired struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this post v1 certificates count payment required response has a 2xx status code
func (o *PostV1CertificatesCountPaymentRequired) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 certificates count payment required response has a 3xx status code
func (o *PostV1CertificatesCountPaymentRequired) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 certificates count payment required response has a 4xx status code
func (o *PostV1CertificatesCountPaymentRequired) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 certificates count payment required response has a 5xx status code
func (o *PostV1CertificatesCountPaymentRequired) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 certificates count payment required response a status code equal to that given
func (o *PostV1CertificatesCountPaymentRequired) IsCode(code int) bool {
	return code == 402
}

// Code gets the status code for the post v1 certificates count payment required response
func (o *PostV1CertificatesCountPaymentRequired) Code() int {
	return 402
}

func (o *PostV1CertificatesCountPaymentRequired) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/count][%d] postV1CertificatesCountPaymentRequired %s", 402, payload)
}

func (o *PostV1CertificatesCountPaymentRequired) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/count][%d] postV1CertificatesCountPaymentRequired %s", 402, payload)
}

func (o *PostV1CertificatesCountPaymentRequired) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *PostV1CertificatesCountPaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1CertificatesCountRequestTimeout creates a PostV1CertificatesCountRequestTimeout with default headers values
func NewPostV1CertificatesCountRequestTimeout() *PostV1CertificatesCountRequestTimeout {
	return &PostV1CertificatesCountRequestTimeout{}
}

/*
PostV1CertificatesCountRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type PostV1CertificatesCountRequestTimeout struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this post v1 certificates count request timeout response has a 2xx status code
func (o *PostV1CertificatesCountRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 certificates count request timeout response has a 3xx status code
func (o *PostV1CertificatesCountRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 certificates count request timeout response has a 4xx status code
func (o *PostV1CertificatesCountRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 certificates count request timeout response has a 5xx status code
func (o *PostV1CertificatesCountRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 certificates count request timeout response a status code equal to that given
func (o *PostV1CertificatesCountRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the post v1 certificates count request timeout response
func (o *PostV1CertificatesCountRequestTimeout) Code() int {
	return 408
}

func (o *PostV1CertificatesCountRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/count][%d] postV1CertificatesCountRequestTimeout %s", 408, payload)
}

func (o *PostV1CertificatesCountRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/count][%d] postV1CertificatesCountRequestTimeout %s", 408, payload)
}

func (o *PostV1CertificatesCountRequestTimeout) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *PostV1CertificatesCountRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1CertificatesCountInternalServerError creates a PostV1CertificatesCountInternalServerError with default headers values
func NewPostV1CertificatesCountInternalServerError() *PostV1CertificatesCountInternalServerError {
	return &PostV1CertificatesCountInternalServerError{}
}

/*
PostV1CertificatesCountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostV1CertificatesCountInternalServerError struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this post v1 certificates count internal server error response has a 2xx status code
func (o *PostV1CertificatesCountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 certificates count internal server error response has a 3xx status code
func (o *PostV1CertificatesCountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 certificates count internal server error response has a 4xx status code
func (o *PostV1CertificatesCountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v1 certificates count internal server error response has a 5xx status code
func (o *PostV1CertificatesCountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post v1 certificates count internal server error response a status code equal to that given
func (o *PostV1CertificatesCountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post v1 certificates count internal server error response
func (o *PostV1CertificatesCountInternalServerError) Code() int {
	return 500
}

func (o *PostV1CertificatesCountInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/count][%d] postV1CertificatesCountInternalServerError %s", 500, payload)
}

func (o *PostV1CertificatesCountInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/count][%d] postV1CertificatesCountInternalServerError %s", 500, payload)
}

func (o *PostV1CertificatesCountInternalServerError) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *PostV1CertificatesCountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostV1CertificatesCountOKBody post v1 certificates count o k body
swagger:model PostV1CertificatesCountOKBody
*/
type PostV1CertificatesCountOKBody struct {
	models.CertificateAPIResponse

	// data
	Data *models.CertificateCertCount `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostV1CertificatesCountOKBody) UnmarshalJSON(raw []byte) error {
	// PostV1CertificatesCountOKBodyAO0
	var postV1CertificatesCountOKBodyAO0 models.CertificateAPIResponse
	if err := swag.ReadJSON(raw, &postV1CertificatesCountOKBodyAO0); err != nil {
		return err
	}
	o.CertificateAPIResponse = postV1CertificatesCountOKBodyAO0

	// PostV1CertificatesCountOKBodyAO1
	var dataPostV1CertificatesCountOKBodyAO1 struct {
		Data *models.CertificateCertCount `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostV1CertificatesCountOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostV1CertificatesCountOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostV1CertificatesCountOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postV1CertificatesCountOKBodyAO0, err := swag.WriteJSON(o.CertificateAPIResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postV1CertificatesCountOKBodyAO0)
	var dataPostV1CertificatesCountOKBodyAO1 struct {
		Data *models.CertificateCertCount `json:"data,omitempty"`
	}

	dataPostV1CertificatesCountOKBodyAO1.Data = o.Data

	jsonDataPostV1CertificatesCountOKBodyAO1, errPostV1CertificatesCountOKBodyAO1 := swag.WriteJSON(dataPostV1CertificatesCountOKBodyAO1)
	if errPostV1CertificatesCountOKBodyAO1 != nil {
		return nil, errPostV1CertificatesCountOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostV1CertificatesCountOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post v1 certificates count o k body
func (o *PostV1CertificatesCountOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.CertificateAPIResponse
	if err := o.CertificateAPIResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostV1CertificatesCountOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postV1CertificatesCountOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postV1CertificatesCountOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post v1 certificates count o k body based on the context it is used
func (o *PostV1CertificatesCountOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.CertificateAPIResponse
	if err := o.CertificateAPIResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostV1CertificatesCountOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if swag.IsZero(o.Data) { // not required
			return nil
		}

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postV1CertificatesCountOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postV1CertificatesCountOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostV1CertificatesCountOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostV1CertificatesCountOKBody) UnmarshalBinary(b []byte) error {
	var res PostV1CertificatesCountOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
