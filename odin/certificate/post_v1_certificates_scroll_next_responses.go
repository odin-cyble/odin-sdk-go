// Code generated by go-swagger; DO NOT EDIT.

package certificate

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cybledev/odin-sdk-go/models"
)

// PostV1CertificatesScrollNextReader is a Reader for the PostV1CertificatesScrollNext structure.
type PostV1CertificatesScrollNextReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostV1CertificatesScrollNextReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostV1CertificatesScrollNextOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostV1CertificatesScrollNextBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 402:
		result := NewPostV1CertificatesScrollNextPaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostV1CertificatesScrollNextRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostV1CertificatesScrollNextInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/certificates/scroll/next] PostV1CertificatesScrollNext", response, response.Code())
	}
}

// NewPostV1CertificatesScrollNextOK creates a PostV1CertificatesScrollNextOK with default headers values
func NewPostV1CertificatesScrollNextOK() *PostV1CertificatesScrollNextOK {
	return &PostV1CertificatesScrollNextOK{}
}

/*
PostV1CertificatesScrollNextOK describes a response with status code 200, with default header values.

OK
*/
type PostV1CertificatesScrollNextOK struct {
	Payload *PostV1CertificatesScrollNextOKBody
}

// IsSuccess returns true when this post v1 certificates scroll next o k response has a 2xx status code
func (o *PostV1CertificatesScrollNextOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post v1 certificates scroll next o k response has a 3xx status code
func (o *PostV1CertificatesScrollNextOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 certificates scroll next o k response has a 4xx status code
func (o *PostV1CertificatesScrollNextOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v1 certificates scroll next o k response has a 5xx status code
func (o *PostV1CertificatesScrollNextOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 certificates scroll next o k response a status code equal to that given
func (o *PostV1CertificatesScrollNextOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post v1 certificates scroll next o k response
func (o *PostV1CertificatesScrollNextOK) Code() int {
	return 200
}

func (o *PostV1CertificatesScrollNextOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/scroll/next][%d] postV1CertificatesScrollNextOK %s", 200, payload)
}

func (o *PostV1CertificatesScrollNextOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/scroll/next][%d] postV1CertificatesScrollNextOK %s", 200, payload)
}

func (o *PostV1CertificatesScrollNextOK) GetPayload() *PostV1CertificatesScrollNextOKBody {
	return o.Payload
}

func (o *PostV1CertificatesScrollNextOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostV1CertificatesScrollNextOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1CertificatesScrollNextBadRequest creates a PostV1CertificatesScrollNextBadRequest with default headers values
func NewPostV1CertificatesScrollNextBadRequest() *PostV1CertificatesScrollNextBadRequest {
	return &PostV1CertificatesScrollNextBadRequest{}
}

/*
PostV1CertificatesScrollNextBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostV1CertificatesScrollNextBadRequest struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this post v1 certificates scroll next bad request response has a 2xx status code
func (o *PostV1CertificatesScrollNextBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 certificates scroll next bad request response has a 3xx status code
func (o *PostV1CertificatesScrollNextBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 certificates scroll next bad request response has a 4xx status code
func (o *PostV1CertificatesScrollNextBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 certificates scroll next bad request response has a 5xx status code
func (o *PostV1CertificatesScrollNextBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 certificates scroll next bad request response a status code equal to that given
func (o *PostV1CertificatesScrollNextBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post v1 certificates scroll next bad request response
func (o *PostV1CertificatesScrollNextBadRequest) Code() int {
	return 400
}

func (o *PostV1CertificatesScrollNextBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/scroll/next][%d] postV1CertificatesScrollNextBadRequest %s", 400, payload)
}

func (o *PostV1CertificatesScrollNextBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/scroll/next][%d] postV1CertificatesScrollNextBadRequest %s", 400, payload)
}

func (o *PostV1CertificatesScrollNextBadRequest) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *PostV1CertificatesScrollNextBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1CertificatesScrollNextPaymentRequired creates a PostV1CertificatesScrollNextPaymentRequired with default headers values
func NewPostV1CertificatesScrollNextPaymentRequired() *PostV1CertificatesScrollNextPaymentRequired {
	return &PostV1CertificatesScrollNextPaymentRequired{}
}

/*
PostV1CertificatesScrollNextPaymentRequired describes a response with status code 402, with default header values.

Payment Required
*/
type PostV1CertificatesScrollNextPaymentRequired struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this post v1 certificates scroll next payment required response has a 2xx status code
func (o *PostV1CertificatesScrollNextPaymentRequired) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 certificates scroll next payment required response has a 3xx status code
func (o *PostV1CertificatesScrollNextPaymentRequired) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 certificates scroll next payment required response has a 4xx status code
func (o *PostV1CertificatesScrollNextPaymentRequired) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 certificates scroll next payment required response has a 5xx status code
func (o *PostV1CertificatesScrollNextPaymentRequired) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 certificates scroll next payment required response a status code equal to that given
func (o *PostV1CertificatesScrollNextPaymentRequired) IsCode(code int) bool {
	return code == 402
}

// Code gets the status code for the post v1 certificates scroll next payment required response
func (o *PostV1CertificatesScrollNextPaymentRequired) Code() int {
	return 402
}

func (o *PostV1CertificatesScrollNextPaymentRequired) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/scroll/next][%d] postV1CertificatesScrollNextPaymentRequired %s", 402, payload)
}

func (o *PostV1CertificatesScrollNextPaymentRequired) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/scroll/next][%d] postV1CertificatesScrollNextPaymentRequired %s", 402, payload)
}

func (o *PostV1CertificatesScrollNextPaymentRequired) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *PostV1CertificatesScrollNextPaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1CertificatesScrollNextRequestTimeout creates a PostV1CertificatesScrollNextRequestTimeout with default headers values
func NewPostV1CertificatesScrollNextRequestTimeout() *PostV1CertificatesScrollNextRequestTimeout {
	return &PostV1CertificatesScrollNextRequestTimeout{}
}

/*
PostV1CertificatesScrollNextRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type PostV1CertificatesScrollNextRequestTimeout struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this post v1 certificates scroll next request timeout response has a 2xx status code
func (o *PostV1CertificatesScrollNextRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 certificates scroll next request timeout response has a 3xx status code
func (o *PostV1CertificatesScrollNextRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 certificates scroll next request timeout response has a 4xx status code
func (o *PostV1CertificatesScrollNextRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 certificates scroll next request timeout response has a 5xx status code
func (o *PostV1CertificatesScrollNextRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 certificates scroll next request timeout response a status code equal to that given
func (o *PostV1CertificatesScrollNextRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the post v1 certificates scroll next request timeout response
func (o *PostV1CertificatesScrollNextRequestTimeout) Code() int {
	return 408
}

func (o *PostV1CertificatesScrollNextRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/scroll/next][%d] postV1CertificatesScrollNextRequestTimeout %s", 408, payload)
}

func (o *PostV1CertificatesScrollNextRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/scroll/next][%d] postV1CertificatesScrollNextRequestTimeout %s", 408, payload)
}

func (o *PostV1CertificatesScrollNextRequestTimeout) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *PostV1CertificatesScrollNextRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1CertificatesScrollNextInternalServerError creates a PostV1CertificatesScrollNextInternalServerError with default headers values
func NewPostV1CertificatesScrollNextInternalServerError() *PostV1CertificatesScrollNextInternalServerError {
	return &PostV1CertificatesScrollNextInternalServerError{}
}

/*
PostV1CertificatesScrollNextInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostV1CertificatesScrollNextInternalServerError struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this post v1 certificates scroll next internal server error response has a 2xx status code
func (o *PostV1CertificatesScrollNextInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 certificates scroll next internal server error response has a 3xx status code
func (o *PostV1CertificatesScrollNextInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 certificates scroll next internal server error response has a 4xx status code
func (o *PostV1CertificatesScrollNextInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v1 certificates scroll next internal server error response has a 5xx status code
func (o *PostV1CertificatesScrollNextInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post v1 certificates scroll next internal server error response a status code equal to that given
func (o *PostV1CertificatesScrollNextInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post v1 certificates scroll next internal server error response
func (o *PostV1CertificatesScrollNextInternalServerError) Code() int {
	return 500
}

func (o *PostV1CertificatesScrollNextInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/scroll/next][%d] postV1CertificatesScrollNextInternalServerError %s", 500, payload)
}

func (o *PostV1CertificatesScrollNextInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/scroll/next][%d] postV1CertificatesScrollNextInternalServerError %s", 500, payload)
}

func (o *PostV1CertificatesScrollNextInternalServerError) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *PostV1CertificatesScrollNextInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostV1CertificatesScrollNextOKBody post v1 certificates scroll next o k body
swagger:model PostV1CertificatesScrollNextOKBody
*/
type PostV1CertificatesScrollNextOKBody struct {
	models.CertificateAPIResponse

	// data
	Data *models.CertificateCertScroll `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostV1CertificatesScrollNextOKBody) UnmarshalJSON(raw []byte) error {
	// PostV1CertificatesScrollNextOKBodyAO0
	var postV1CertificatesScrollNextOKBodyAO0 models.CertificateAPIResponse
	if err := swag.ReadJSON(raw, &postV1CertificatesScrollNextOKBodyAO0); err != nil {
		return err
	}
	o.CertificateAPIResponse = postV1CertificatesScrollNextOKBodyAO0

	// PostV1CertificatesScrollNextOKBodyAO1
	var dataPostV1CertificatesScrollNextOKBodyAO1 struct {
		Data *models.CertificateCertScroll `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostV1CertificatesScrollNextOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostV1CertificatesScrollNextOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostV1CertificatesScrollNextOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postV1CertificatesScrollNextOKBodyAO0, err := swag.WriteJSON(o.CertificateAPIResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postV1CertificatesScrollNextOKBodyAO0)
	var dataPostV1CertificatesScrollNextOKBodyAO1 struct {
		Data *models.CertificateCertScroll `json:"data,omitempty"`
	}

	dataPostV1CertificatesScrollNextOKBodyAO1.Data = o.Data

	jsonDataPostV1CertificatesScrollNextOKBodyAO1, errPostV1CertificatesScrollNextOKBodyAO1 := swag.WriteJSON(dataPostV1CertificatesScrollNextOKBodyAO1)
	if errPostV1CertificatesScrollNextOKBodyAO1 != nil {
		return nil, errPostV1CertificatesScrollNextOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostV1CertificatesScrollNextOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post v1 certificates scroll next o k body
func (o *PostV1CertificatesScrollNextOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.CertificateAPIResponse
	if err := o.CertificateAPIResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostV1CertificatesScrollNextOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postV1CertificatesScrollNextOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postV1CertificatesScrollNextOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post v1 certificates scroll next o k body based on the context it is used
func (o *PostV1CertificatesScrollNextOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.CertificateAPIResponse
	if err := o.CertificateAPIResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostV1CertificatesScrollNextOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if swag.IsZero(o.Data) { // not required
			return nil
		}

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postV1CertificatesScrollNextOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postV1CertificatesScrollNextOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostV1CertificatesScrollNextOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostV1CertificatesScrollNextOKBody) UnmarshalBinary(b []byte) error {
	var res PostV1CertificatesScrollNextOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
