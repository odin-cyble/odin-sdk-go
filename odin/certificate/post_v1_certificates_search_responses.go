// Code generated by go-swagger; DO NOT EDIT.

package certificate

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cybledev/odin-sdk-go/models"
)

// PostV1CertificatesSearchReader is a Reader for the PostV1CertificatesSearch structure.
type PostV1CertificatesSearchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostV1CertificatesSearchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostV1CertificatesSearchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostV1CertificatesSearchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 402:
		result := NewPostV1CertificatesSearchPaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostV1CertificatesSearchRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostV1CertificatesSearchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/certificates/search] PostV1CertificatesSearch", response, response.Code())
	}
}

// NewPostV1CertificatesSearchOK creates a PostV1CertificatesSearchOK with default headers values
func NewPostV1CertificatesSearchOK() *PostV1CertificatesSearchOK {
	return &PostV1CertificatesSearchOK{}
}

/*
PostV1CertificatesSearchOK describes a response with status code 200, with default header values.

OK
*/
type PostV1CertificatesSearchOK struct {
	Payload *models.CertificateCertificateSearchResponse
}

// IsSuccess returns true when this post v1 certificates search o k response has a 2xx status code
func (o *PostV1CertificatesSearchOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post v1 certificates search o k response has a 3xx status code
func (o *PostV1CertificatesSearchOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 certificates search o k response has a 4xx status code
func (o *PostV1CertificatesSearchOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v1 certificates search o k response has a 5xx status code
func (o *PostV1CertificatesSearchOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 certificates search o k response a status code equal to that given
func (o *PostV1CertificatesSearchOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post v1 certificates search o k response
func (o *PostV1CertificatesSearchOK) Code() int {
	return 200
}

func (o *PostV1CertificatesSearchOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/search][%d] postV1CertificatesSearchOK %s", 200, payload)
}

func (o *PostV1CertificatesSearchOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/search][%d] postV1CertificatesSearchOK %s", 200, payload)
}

func (o *PostV1CertificatesSearchOK) GetPayload() *models.CertificateCertificateSearchResponse {
	return o.Payload
}

func (o *PostV1CertificatesSearchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateCertificateSearchResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1CertificatesSearchBadRequest creates a PostV1CertificatesSearchBadRequest with default headers values
func NewPostV1CertificatesSearchBadRequest() *PostV1CertificatesSearchBadRequest {
	return &PostV1CertificatesSearchBadRequest{}
}

/*
PostV1CertificatesSearchBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostV1CertificatesSearchBadRequest struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this post v1 certificates search bad request response has a 2xx status code
func (o *PostV1CertificatesSearchBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 certificates search bad request response has a 3xx status code
func (o *PostV1CertificatesSearchBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 certificates search bad request response has a 4xx status code
func (o *PostV1CertificatesSearchBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 certificates search bad request response has a 5xx status code
func (o *PostV1CertificatesSearchBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 certificates search bad request response a status code equal to that given
func (o *PostV1CertificatesSearchBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post v1 certificates search bad request response
func (o *PostV1CertificatesSearchBadRequest) Code() int {
	return 400
}

func (o *PostV1CertificatesSearchBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/search][%d] postV1CertificatesSearchBadRequest %s", 400, payload)
}

func (o *PostV1CertificatesSearchBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/search][%d] postV1CertificatesSearchBadRequest %s", 400, payload)
}

func (o *PostV1CertificatesSearchBadRequest) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *PostV1CertificatesSearchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1CertificatesSearchPaymentRequired creates a PostV1CertificatesSearchPaymentRequired with default headers values
func NewPostV1CertificatesSearchPaymentRequired() *PostV1CertificatesSearchPaymentRequired {
	return &PostV1CertificatesSearchPaymentRequired{}
}

/*
PostV1CertificatesSearchPaymentRequired describes a response with status code 402, with default header values.

Payment Required
*/
type PostV1CertificatesSearchPaymentRequired struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this post v1 certificates search payment required response has a 2xx status code
func (o *PostV1CertificatesSearchPaymentRequired) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 certificates search payment required response has a 3xx status code
func (o *PostV1CertificatesSearchPaymentRequired) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 certificates search payment required response has a 4xx status code
func (o *PostV1CertificatesSearchPaymentRequired) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 certificates search payment required response has a 5xx status code
func (o *PostV1CertificatesSearchPaymentRequired) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 certificates search payment required response a status code equal to that given
func (o *PostV1CertificatesSearchPaymentRequired) IsCode(code int) bool {
	return code == 402
}

// Code gets the status code for the post v1 certificates search payment required response
func (o *PostV1CertificatesSearchPaymentRequired) Code() int {
	return 402
}

func (o *PostV1CertificatesSearchPaymentRequired) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/search][%d] postV1CertificatesSearchPaymentRequired %s", 402, payload)
}

func (o *PostV1CertificatesSearchPaymentRequired) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/search][%d] postV1CertificatesSearchPaymentRequired %s", 402, payload)
}

func (o *PostV1CertificatesSearchPaymentRequired) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *PostV1CertificatesSearchPaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1CertificatesSearchRequestTimeout creates a PostV1CertificatesSearchRequestTimeout with default headers values
func NewPostV1CertificatesSearchRequestTimeout() *PostV1CertificatesSearchRequestTimeout {
	return &PostV1CertificatesSearchRequestTimeout{}
}

/*
PostV1CertificatesSearchRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type PostV1CertificatesSearchRequestTimeout struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this post v1 certificates search request timeout response has a 2xx status code
func (o *PostV1CertificatesSearchRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 certificates search request timeout response has a 3xx status code
func (o *PostV1CertificatesSearchRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 certificates search request timeout response has a 4xx status code
func (o *PostV1CertificatesSearchRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 certificates search request timeout response has a 5xx status code
func (o *PostV1CertificatesSearchRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 certificates search request timeout response a status code equal to that given
func (o *PostV1CertificatesSearchRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the post v1 certificates search request timeout response
func (o *PostV1CertificatesSearchRequestTimeout) Code() int {
	return 408
}

func (o *PostV1CertificatesSearchRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/search][%d] postV1CertificatesSearchRequestTimeout %s", 408, payload)
}

func (o *PostV1CertificatesSearchRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/search][%d] postV1CertificatesSearchRequestTimeout %s", 408, payload)
}

func (o *PostV1CertificatesSearchRequestTimeout) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *PostV1CertificatesSearchRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1CertificatesSearchInternalServerError creates a PostV1CertificatesSearchInternalServerError with default headers values
func NewPostV1CertificatesSearchInternalServerError() *PostV1CertificatesSearchInternalServerError {
	return &PostV1CertificatesSearchInternalServerError{}
}

/*
PostV1CertificatesSearchInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostV1CertificatesSearchInternalServerError struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this post v1 certificates search internal server error response has a 2xx status code
func (o *PostV1CertificatesSearchInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 certificates search internal server error response has a 3xx status code
func (o *PostV1CertificatesSearchInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 certificates search internal server error response has a 4xx status code
func (o *PostV1CertificatesSearchInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v1 certificates search internal server error response has a 5xx status code
func (o *PostV1CertificatesSearchInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post v1 certificates search internal server error response a status code equal to that given
func (o *PostV1CertificatesSearchInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post v1 certificates search internal server error response
func (o *PostV1CertificatesSearchInternalServerError) Code() int {
	return 500
}

func (o *PostV1CertificatesSearchInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/search][%d] postV1CertificatesSearchInternalServerError %s", 500, payload)
}

func (o *PostV1CertificatesSearchInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/search][%d] postV1CertificatesSearchInternalServerError %s", 500, payload)
}

func (o *PostV1CertificatesSearchInternalServerError) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *PostV1CertificatesSearchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
