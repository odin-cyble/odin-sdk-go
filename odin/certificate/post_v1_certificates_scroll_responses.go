// Code generated by go-swagger; DO NOT EDIT.

package certificate

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cybledev/odin-sdk-go/models"
)

// PostV1CertificatesScrollReader is a Reader for the PostV1CertificatesScroll structure.
type PostV1CertificatesScrollReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostV1CertificatesScrollReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostV1CertificatesScrollOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostV1CertificatesScrollBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 402:
		result := NewPostV1CertificatesScrollPaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostV1CertificatesScrollRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostV1CertificatesScrollInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/certificates/scroll] PostV1CertificatesScroll", response, response.Code())
	}
}

// NewPostV1CertificatesScrollOK creates a PostV1CertificatesScrollOK with default headers values
func NewPostV1CertificatesScrollOK() *PostV1CertificatesScrollOK {
	return &PostV1CertificatesScrollOK{}
}

/*
PostV1CertificatesScrollOK describes a response with status code 200, with default header values.

OK
*/
type PostV1CertificatesScrollOK struct {
	Payload *PostV1CertificatesScrollOKBody
}

// IsSuccess returns true when this post v1 certificates scroll o k response has a 2xx status code
func (o *PostV1CertificatesScrollOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post v1 certificates scroll o k response has a 3xx status code
func (o *PostV1CertificatesScrollOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 certificates scroll o k response has a 4xx status code
func (o *PostV1CertificatesScrollOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v1 certificates scroll o k response has a 5xx status code
func (o *PostV1CertificatesScrollOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 certificates scroll o k response a status code equal to that given
func (o *PostV1CertificatesScrollOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post v1 certificates scroll o k response
func (o *PostV1CertificatesScrollOK) Code() int {
	return 200
}

func (o *PostV1CertificatesScrollOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/scroll][%d] postV1CertificatesScrollOK %s", 200, payload)
}

func (o *PostV1CertificatesScrollOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/scroll][%d] postV1CertificatesScrollOK %s", 200, payload)
}

func (o *PostV1CertificatesScrollOK) GetPayload() *PostV1CertificatesScrollOKBody {
	return o.Payload
}

func (o *PostV1CertificatesScrollOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostV1CertificatesScrollOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1CertificatesScrollBadRequest creates a PostV1CertificatesScrollBadRequest with default headers values
func NewPostV1CertificatesScrollBadRequest() *PostV1CertificatesScrollBadRequest {
	return &PostV1CertificatesScrollBadRequest{}
}

/*
PostV1CertificatesScrollBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostV1CertificatesScrollBadRequest struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this post v1 certificates scroll bad request response has a 2xx status code
func (o *PostV1CertificatesScrollBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 certificates scroll bad request response has a 3xx status code
func (o *PostV1CertificatesScrollBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 certificates scroll bad request response has a 4xx status code
func (o *PostV1CertificatesScrollBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 certificates scroll bad request response has a 5xx status code
func (o *PostV1CertificatesScrollBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 certificates scroll bad request response a status code equal to that given
func (o *PostV1CertificatesScrollBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post v1 certificates scroll bad request response
func (o *PostV1CertificatesScrollBadRequest) Code() int {
	return 400
}

func (o *PostV1CertificatesScrollBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/scroll][%d] postV1CertificatesScrollBadRequest %s", 400, payload)
}

func (o *PostV1CertificatesScrollBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/scroll][%d] postV1CertificatesScrollBadRequest %s", 400, payload)
}

func (o *PostV1CertificatesScrollBadRequest) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *PostV1CertificatesScrollBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1CertificatesScrollPaymentRequired creates a PostV1CertificatesScrollPaymentRequired with default headers values
func NewPostV1CertificatesScrollPaymentRequired() *PostV1CertificatesScrollPaymentRequired {
	return &PostV1CertificatesScrollPaymentRequired{}
}

/*
PostV1CertificatesScrollPaymentRequired describes a response with status code 402, with default header values.

Payment Required
*/
type PostV1CertificatesScrollPaymentRequired struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this post v1 certificates scroll payment required response has a 2xx status code
func (o *PostV1CertificatesScrollPaymentRequired) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 certificates scroll payment required response has a 3xx status code
func (o *PostV1CertificatesScrollPaymentRequired) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 certificates scroll payment required response has a 4xx status code
func (o *PostV1CertificatesScrollPaymentRequired) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 certificates scroll payment required response has a 5xx status code
func (o *PostV1CertificatesScrollPaymentRequired) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 certificates scroll payment required response a status code equal to that given
func (o *PostV1CertificatesScrollPaymentRequired) IsCode(code int) bool {
	return code == 402
}

// Code gets the status code for the post v1 certificates scroll payment required response
func (o *PostV1CertificatesScrollPaymentRequired) Code() int {
	return 402
}

func (o *PostV1CertificatesScrollPaymentRequired) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/scroll][%d] postV1CertificatesScrollPaymentRequired %s", 402, payload)
}

func (o *PostV1CertificatesScrollPaymentRequired) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/scroll][%d] postV1CertificatesScrollPaymentRequired %s", 402, payload)
}

func (o *PostV1CertificatesScrollPaymentRequired) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *PostV1CertificatesScrollPaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1CertificatesScrollRequestTimeout creates a PostV1CertificatesScrollRequestTimeout with default headers values
func NewPostV1CertificatesScrollRequestTimeout() *PostV1CertificatesScrollRequestTimeout {
	return &PostV1CertificatesScrollRequestTimeout{}
}

/*
PostV1CertificatesScrollRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type PostV1CertificatesScrollRequestTimeout struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this post v1 certificates scroll request timeout response has a 2xx status code
func (o *PostV1CertificatesScrollRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 certificates scroll request timeout response has a 3xx status code
func (o *PostV1CertificatesScrollRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 certificates scroll request timeout response has a 4xx status code
func (o *PostV1CertificatesScrollRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 certificates scroll request timeout response has a 5xx status code
func (o *PostV1CertificatesScrollRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 certificates scroll request timeout response a status code equal to that given
func (o *PostV1CertificatesScrollRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the post v1 certificates scroll request timeout response
func (o *PostV1CertificatesScrollRequestTimeout) Code() int {
	return 408
}

func (o *PostV1CertificatesScrollRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/scroll][%d] postV1CertificatesScrollRequestTimeout %s", 408, payload)
}

func (o *PostV1CertificatesScrollRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/scroll][%d] postV1CertificatesScrollRequestTimeout %s", 408, payload)
}

func (o *PostV1CertificatesScrollRequestTimeout) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *PostV1CertificatesScrollRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1CertificatesScrollInternalServerError creates a PostV1CertificatesScrollInternalServerError with default headers values
func NewPostV1CertificatesScrollInternalServerError() *PostV1CertificatesScrollInternalServerError {
	return &PostV1CertificatesScrollInternalServerError{}
}

/*
PostV1CertificatesScrollInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostV1CertificatesScrollInternalServerError struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this post v1 certificates scroll internal server error response has a 2xx status code
func (o *PostV1CertificatesScrollInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 certificates scroll internal server error response has a 3xx status code
func (o *PostV1CertificatesScrollInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 certificates scroll internal server error response has a 4xx status code
func (o *PostV1CertificatesScrollInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v1 certificates scroll internal server error response has a 5xx status code
func (o *PostV1CertificatesScrollInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post v1 certificates scroll internal server error response a status code equal to that given
func (o *PostV1CertificatesScrollInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post v1 certificates scroll internal server error response
func (o *PostV1CertificatesScrollInternalServerError) Code() int {
	return 500
}

func (o *PostV1CertificatesScrollInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/scroll][%d] postV1CertificatesScrollInternalServerError %s", 500, payload)
}

func (o *PostV1CertificatesScrollInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/certificates/scroll][%d] postV1CertificatesScrollInternalServerError %s", 500, payload)
}

func (o *PostV1CertificatesScrollInternalServerError) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *PostV1CertificatesScrollInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostV1CertificatesScrollOKBody post v1 certificates scroll o k body
swagger:model PostV1CertificatesScrollOKBody
*/
type PostV1CertificatesScrollOKBody struct {
	models.CertificateAPIResponse

	// data
	Data *models.CertificateCertScroll `json:"data,omitempty"`

	// pagination
	Pagination *models.CertificateSearchPagination `json:"pagination,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostV1CertificatesScrollOKBody) UnmarshalJSON(raw []byte) error {
	// PostV1CertificatesScrollOKBodyAO0
	var postV1CertificatesScrollOKBodyAO0 models.CertificateAPIResponse
	if err := swag.ReadJSON(raw, &postV1CertificatesScrollOKBodyAO0); err != nil {
		return err
	}
	o.CertificateAPIResponse = postV1CertificatesScrollOKBodyAO0

	// PostV1CertificatesScrollOKBodyAO1
	var dataPostV1CertificatesScrollOKBodyAO1 struct {
		Data *models.CertificateCertScroll `json:"data,omitempty"`

		Pagination *models.CertificateSearchPagination `json:"pagination,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostV1CertificatesScrollOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostV1CertificatesScrollOKBodyAO1.Data

	o.Pagination = dataPostV1CertificatesScrollOKBodyAO1.Pagination

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostV1CertificatesScrollOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postV1CertificatesScrollOKBodyAO0, err := swag.WriteJSON(o.CertificateAPIResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postV1CertificatesScrollOKBodyAO0)
	var dataPostV1CertificatesScrollOKBodyAO1 struct {
		Data *models.CertificateCertScroll `json:"data,omitempty"`

		Pagination *models.CertificateSearchPagination `json:"pagination,omitempty"`
	}

	dataPostV1CertificatesScrollOKBodyAO1.Data = o.Data

	dataPostV1CertificatesScrollOKBodyAO1.Pagination = o.Pagination

	jsonDataPostV1CertificatesScrollOKBodyAO1, errPostV1CertificatesScrollOKBodyAO1 := swag.WriteJSON(dataPostV1CertificatesScrollOKBodyAO1)
	if errPostV1CertificatesScrollOKBodyAO1 != nil {
		return nil, errPostV1CertificatesScrollOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostV1CertificatesScrollOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post v1 certificates scroll o k body
func (o *PostV1CertificatesScrollOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.CertificateAPIResponse
	if err := o.CertificateAPIResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostV1CertificatesScrollOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postV1CertificatesScrollOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postV1CertificatesScrollOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

func (o *PostV1CertificatesScrollOKBody) validatePagination(formats strfmt.Registry) error {

	if swag.IsZero(o.Pagination) { // not required
		return nil
	}

	if o.Pagination != nil {
		if err := o.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postV1CertificatesScrollOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postV1CertificatesScrollOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post v1 certificates scroll o k body based on the context it is used
func (o *PostV1CertificatesScrollOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.CertificateAPIResponse
	if err := o.CertificateAPIResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostV1CertificatesScrollOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if swag.IsZero(o.Data) { // not required
			return nil
		}

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postV1CertificatesScrollOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postV1CertificatesScrollOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

func (o *PostV1CertificatesScrollOKBody) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if o.Pagination != nil {

		if swag.IsZero(o.Pagination) { // not required
			return nil
		}

		if err := o.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postV1CertificatesScrollOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postV1CertificatesScrollOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostV1CertificatesScrollOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostV1CertificatesScrollOKBody) UnmarshalBinary(b []byte) error {
	var res PostV1CertificatesScrollOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
