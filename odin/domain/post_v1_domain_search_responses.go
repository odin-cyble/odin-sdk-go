// Code generated by go-swagger; DO NOT EDIT.

package domain

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cybledev/odin-sdk-go/models"
)

// PostV1DomainSearchReader is a Reader for the PostV1DomainSearch structure.
type PostV1DomainSearchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostV1DomainSearchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostV1DomainSearchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostV1DomainSearchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostV1DomainSearchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/domain/search] PostV1DomainSearch", response, response.Code())
	}
}

// NewPostV1DomainSearchOK creates a PostV1DomainSearchOK with default headers values
func NewPostV1DomainSearchOK() *PostV1DomainSearchOK {
	return &PostV1DomainSearchOK{}
}

/*
PostV1DomainSearchOK describes a response with status code 200, with default header values.

OK
*/
type PostV1DomainSearchOK struct {
	Payload *PostV1DomainSearchOKBody
}

// IsSuccess returns true when this post v1 domain search o k response has a 2xx status code
func (o *PostV1DomainSearchOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post v1 domain search o k response has a 3xx status code
func (o *PostV1DomainSearchOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 domain search o k response has a 4xx status code
func (o *PostV1DomainSearchOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v1 domain search o k response has a 5xx status code
func (o *PostV1DomainSearchOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 domain search o k response a status code equal to that given
func (o *PostV1DomainSearchOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post v1 domain search o k response
func (o *PostV1DomainSearchOK) Code() int {
	return 200
}

func (o *PostV1DomainSearchOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/domain/search][%d] postV1DomainSearchOK %s", 200, payload)
}

func (o *PostV1DomainSearchOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/domain/search][%d] postV1DomainSearchOK %s", 200, payload)
}

func (o *PostV1DomainSearchOK) GetPayload() *PostV1DomainSearchOKBody {
	return o.Payload
}

func (o *PostV1DomainSearchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostV1DomainSearchOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1DomainSearchBadRequest creates a PostV1DomainSearchBadRequest with default headers values
func NewPostV1DomainSearchBadRequest() *PostV1DomainSearchBadRequest {
	return &PostV1DomainSearchBadRequest{}
}

/*
PostV1DomainSearchBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostV1DomainSearchBadRequest struct {
	Payload *models.DNSErrorResponse
}

// IsSuccess returns true when this post v1 domain search bad request response has a 2xx status code
func (o *PostV1DomainSearchBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 domain search bad request response has a 3xx status code
func (o *PostV1DomainSearchBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 domain search bad request response has a 4xx status code
func (o *PostV1DomainSearchBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 domain search bad request response has a 5xx status code
func (o *PostV1DomainSearchBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 domain search bad request response a status code equal to that given
func (o *PostV1DomainSearchBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post v1 domain search bad request response
func (o *PostV1DomainSearchBadRequest) Code() int {
	return 400
}

func (o *PostV1DomainSearchBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/domain/search][%d] postV1DomainSearchBadRequest %s", 400, payload)
}

func (o *PostV1DomainSearchBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/domain/search][%d] postV1DomainSearchBadRequest %s", 400, payload)
}

func (o *PostV1DomainSearchBadRequest) GetPayload() *models.DNSErrorResponse {
	return o.Payload
}

func (o *PostV1DomainSearchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DNSErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1DomainSearchInternalServerError creates a PostV1DomainSearchInternalServerError with default headers values
func NewPostV1DomainSearchInternalServerError() *PostV1DomainSearchInternalServerError {
	return &PostV1DomainSearchInternalServerError{}
}

/*
PostV1DomainSearchInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostV1DomainSearchInternalServerError struct {
	Payload *models.DNSErrorResponse
}

// IsSuccess returns true when this post v1 domain search internal server error response has a 2xx status code
func (o *PostV1DomainSearchInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 domain search internal server error response has a 3xx status code
func (o *PostV1DomainSearchInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 domain search internal server error response has a 4xx status code
func (o *PostV1DomainSearchInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v1 domain search internal server error response has a 5xx status code
func (o *PostV1DomainSearchInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post v1 domain search internal server error response a status code equal to that given
func (o *PostV1DomainSearchInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post v1 domain search internal server error response
func (o *PostV1DomainSearchInternalServerError) Code() int {
	return 500
}

func (o *PostV1DomainSearchInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/domain/search][%d] postV1DomainSearchInternalServerError %s", 500, payload)
}

func (o *PostV1DomainSearchInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/domain/search][%d] postV1DomainSearchInternalServerError %s", 500, payload)
}

func (o *PostV1DomainSearchInternalServerError) GetPayload() *models.DNSErrorResponse {
	return o.Payload
}

func (o *PostV1DomainSearchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DNSErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostV1DomainSearchOKBody post v1 domain search o k body
swagger:model PostV1DomainSearchOKBody
*/
type PostV1DomainSearchOKBody struct {
	models.DNSAPIResponse

	// data
	Data []*models.EshandlerDNS `json:"data"`

	// pagination
	Pagination *models.DNSSearchPagination `json:"pagination,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostV1DomainSearchOKBody) UnmarshalJSON(raw []byte) error {
	// PostV1DomainSearchOKBodyAO0
	var postV1DomainSearchOKBodyAO0 models.DNSAPIResponse
	if err := swag.ReadJSON(raw, &postV1DomainSearchOKBodyAO0); err != nil {
		return err
	}
	o.DNSAPIResponse = postV1DomainSearchOKBodyAO0

	// PostV1DomainSearchOKBodyAO1
	var dataPostV1DomainSearchOKBodyAO1 struct {
		Data []*models.EshandlerDNS `json:"data"`

		Pagination *models.DNSSearchPagination `json:"pagination,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostV1DomainSearchOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostV1DomainSearchOKBodyAO1.Data

	o.Pagination = dataPostV1DomainSearchOKBodyAO1.Pagination

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostV1DomainSearchOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postV1DomainSearchOKBodyAO0, err := swag.WriteJSON(o.DNSAPIResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postV1DomainSearchOKBodyAO0)
	var dataPostV1DomainSearchOKBodyAO1 struct {
		Data []*models.EshandlerDNS `json:"data"`

		Pagination *models.DNSSearchPagination `json:"pagination,omitempty"`
	}

	dataPostV1DomainSearchOKBodyAO1.Data = o.Data

	dataPostV1DomainSearchOKBodyAO1.Pagination = o.Pagination

	jsonDataPostV1DomainSearchOKBodyAO1, errPostV1DomainSearchOKBodyAO1 := swag.WriteJSON(dataPostV1DomainSearchOKBodyAO1)
	if errPostV1DomainSearchOKBodyAO1 != nil {
		return nil, errPostV1DomainSearchOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostV1DomainSearchOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post v1 domain search o k body
func (o *PostV1DomainSearchOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.DNSAPIResponse
	if err := o.DNSAPIResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostV1DomainSearchOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postV1DomainSearchOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postV1DomainSearchOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PostV1DomainSearchOKBody) validatePagination(formats strfmt.Registry) error {

	if swag.IsZero(o.Pagination) { // not required
		return nil
	}

	if o.Pagination != nil {
		if err := o.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postV1DomainSearchOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postV1DomainSearchOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post v1 domain search o k body based on the context it is used
func (o *PostV1DomainSearchOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.DNSAPIResponse
	if err := o.DNSAPIResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostV1DomainSearchOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {

			if swag.IsZero(o.Data[i]) { // not required
				return nil
			}

			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postV1DomainSearchOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postV1DomainSearchOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PostV1DomainSearchOKBody) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if o.Pagination != nil {

		if swag.IsZero(o.Pagination) { // not required
			return nil
		}

		if err := o.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postV1DomainSearchOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postV1DomainSearchOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostV1DomainSearchOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostV1DomainSearchOKBody) UnmarshalBinary(b []byte) error {
	var res PostV1DomainSearchOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
