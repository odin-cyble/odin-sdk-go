// Code generated by go-swagger; DO NOT EDIT.

package domain

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cybledev/odin-sdk-go/models"
)

// PostV1DomainSubdomainCountReader is a Reader for the PostV1DomainSubdomainCount structure.
type PostV1DomainSubdomainCountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostV1DomainSubdomainCountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostV1DomainSubdomainCountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostV1DomainSubdomainCountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostV1DomainSubdomainCountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/domain/subdomain/count] PostV1DomainSubdomainCount", response, response.Code())
	}
}

// NewPostV1DomainSubdomainCountOK creates a PostV1DomainSubdomainCountOK with default headers values
func NewPostV1DomainSubdomainCountOK() *PostV1DomainSubdomainCountOK {
	return &PostV1DomainSubdomainCountOK{}
}

/*
PostV1DomainSubdomainCountOK describes a response with status code 200, with default header values.

OK
*/
type PostV1DomainSubdomainCountOK struct {
	Payload *PostV1DomainSubdomainCountOKBody
}

// IsSuccess returns true when this post v1 domain subdomain count o k response has a 2xx status code
func (o *PostV1DomainSubdomainCountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post v1 domain subdomain count o k response has a 3xx status code
func (o *PostV1DomainSubdomainCountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 domain subdomain count o k response has a 4xx status code
func (o *PostV1DomainSubdomainCountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v1 domain subdomain count o k response has a 5xx status code
func (o *PostV1DomainSubdomainCountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 domain subdomain count o k response a status code equal to that given
func (o *PostV1DomainSubdomainCountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post v1 domain subdomain count o k response
func (o *PostV1DomainSubdomainCountOK) Code() int {
	return 200
}

func (o *PostV1DomainSubdomainCountOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/domain/subdomain/count][%d] postV1DomainSubdomainCountOK %s", 200, payload)
}

func (o *PostV1DomainSubdomainCountOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/domain/subdomain/count][%d] postV1DomainSubdomainCountOK %s", 200, payload)
}

func (o *PostV1DomainSubdomainCountOK) GetPayload() *PostV1DomainSubdomainCountOKBody {
	return o.Payload
}

func (o *PostV1DomainSubdomainCountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostV1DomainSubdomainCountOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1DomainSubdomainCountBadRequest creates a PostV1DomainSubdomainCountBadRequest with default headers values
func NewPostV1DomainSubdomainCountBadRequest() *PostV1DomainSubdomainCountBadRequest {
	return &PostV1DomainSubdomainCountBadRequest{}
}

/*
PostV1DomainSubdomainCountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostV1DomainSubdomainCountBadRequest struct {
	Payload *models.DNSErrorResponse
}

// IsSuccess returns true when this post v1 domain subdomain count bad request response has a 2xx status code
func (o *PostV1DomainSubdomainCountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 domain subdomain count bad request response has a 3xx status code
func (o *PostV1DomainSubdomainCountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 domain subdomain count bad request response has a 4xx status code
func (o *PostV1DomainSubdomainCountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 domain subdomain count bad request response has a 5xx status code
func (o *PostV1DomainSubdomainCountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 domain subdomain count bad request response a status code equal to that given
func (o *PostV1DomainSubdomainCountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post v1 domain subdomain count bad request response
func (o *PostV1DomainSubdomainCountBadRequest) Code() int {
	return 400
}

func (o *PostV1DomainSubdomainCountBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/domain/subdomain/count][%d] postV1DomainSubdomainCountBadRequest %s", 400, payload)
}

func (o *PostV1DomainSubdomainCountBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/domain/subdomain/count][%d] postV1DomainSubdomainCountBadRequest %s", 400, payload)
}

func (o *PostV1DomainSubdomainCountBadRequest) GetPayload() *models.DNSErrorResponse {
	return o.Payload
}

func (o *PostV1DomainSubdomainCountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DNSErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1DomainSubdomainCountInternalServerError creates a PostV1DomainSubdomainCountInternalServerError with default headers values
func NewPostV1DomainSubdomainCountInternalServerError() *PostV1DomainSubdomainCountInternalServerError {
	return &PostV1DomainSubdomainCountInternalServerError{}
}

/*
PostV1DomainSubdomainCountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostV1DomainSubdomainCountInternalServerError struct {
	Payload *models.DNSErrorResponse
}

// IsSuccess returns true when this post v1 domain subdomain count internal server error response has a 2xx status code
func (o *PostV1DomainSubdomainCountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 domain subdomain count internal server error response has a 3xx status code
func (o *PostV1DomainSubdomainCountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 domain subdomain count internal server error response has a 4xx status code
func (o *PostV1DomainSubdomainCountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v1 domain subdomain count internal server error response has a 5xx status code
func (o *PostV1DomainSubdomainCountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post v1 domain subdomain count internal server error response a status code equal to that given
func (o *PostV1DomainSubdomainCountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post v1 domain subdomain count internal server error response
func (o *PostV1DomainSubdomainCountInternalServerError) Code() int {
	return 500
}

func (o *PostV1DomainSubdomainCountInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/domain/subdomain/count][%d] postV1DomainSubdomainCountInternalServerError %s", 500, payload)
}

func (o *PostV1DomainSubdomainCountInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/domain/subdomain/count][%d] postV1DomainSubdomainCountInternalServerError %s", 500, payload)
}

func (o *PostV1DomainSubdomainCountInternalServerError) GetPayload() *models.DNSErrorResponse {
	return o.Payload
}

func (o *PostV1DomainSubdomainCountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DNSErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostV1DomainSubdomainCountOKBody post v1 domain subdomain count o k body
swagger:model PostV1DomainSubdomainCountOKBody
*/
type PostV1DomainSubdomainCountOKBody struct {
	models.DNSAPIResponse

	// data
	Data *models.DNSData `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostV1DomainSubdomainCountOKBody) UnmarshalJSON(raw []byte) error {
	// PostV1DomainSubdomainCountOKBodyAO0
	var postV1DomainSubdomainCountOKBodyAO0 models.DNSAPIResponse
	if err := swag.ReadJSON(raw, &postV1DomainSubdomainCountOKBodyAO0); err != nil {
		return err
	}
	o.DNSAPIResponse = postV1DomainSubdomainCountOKBodyAO0

	// PostV1DomainSubdomainCountOKBodyAO1
	var dataPostV1DomainSubdomainCountOKBodyAO1 struct {
		Data *models.DNSData `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostV1DomainSubdomainCountOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostV1DomainSubdomainCountOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostV1DomainSubdomainCountOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postV1DomainSubdomainCountOKBodyAO0, err := swag.WriteJSON(o.DNSAPIResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postV1DomainSubdomainCountOKBodyAO0)
	var dataPostV1DomainSubdomainCountOKBodyAO1 struct {
		Data *models.DNSData `json:"data,omitempty"`
	}

	dataPostV1DomainSubdomainCountOKBodyAO1.Data = o.Data

	jsonDataPostV1DomainSubdomainCountOKBodyAO1, errPostV1DomainSubdomainCountOKBodyAO1 := swag.WriteJSON(dataPostV1DomainSubdomainCountOKBodyAO1)
	if errPostV1DomainSubdomainCountOKBodyAO1 != nil {
		return nil, errPostV1DomainSubdomainCountOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostV1DomainSubdomainCountOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post v1 domain subdomain count o k body
func (o *PostV1DomainSubdomainCountOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.DNSAPIResponse
	if err := o.DNSAPIResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostV1DomainSubdomainCountOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postV1DomainSubdomainCountOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postV1DomainSubdomainCountOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post v1 domain subdomain count o k body based on the context it is used
func (o *PostV1DomainSubdomainCountOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.DNSAPIResponse
	if err := o.DNSAPIResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostV1DomainSubdomainCountOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if swag.IsZero(o.Data) { // not required
			return nil
		}

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postV1DomainSubdomainCountOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postV1DomainSubdomainCountOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostV1DomainSubdomainCountOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostV1DomainSubdomainCountOKBody) UnmarshalBinary(b []byte) error {
	var res PostV1DomainSubdomainCountOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
