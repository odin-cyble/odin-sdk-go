// Code generated by go-swagger; DO NOT EDIT.

package domain

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cybledev/odin-sdk-go/models"
)

// GetV1DomainWhoisDomainNameIsRegisteredReader is a Reader for the GetV1DomainWhoisDomainNameIsRegistered structure.
type GetV1DomainWhoisDomainNameIsRegisteredReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetV1DomainWhoisDomainNameIsRegisteredReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetV1DomainWhoisDomainNameIsRegisteredOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetV1DomainWhoisDomainNameIsRegisteredBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 402:
		result := NewGetV1DomainWhoisDomainNameIsRegisteredPaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetV1DomainWhoisDomainNameIsRegisteredRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetV1DomainWhoisDomainNameIsRegisteredInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/domain/whois/{domain-name}/is-registered] GetV1DomainWhoisDomainNameIsRegistered", response, response.Code())
	}
}

// NewGetV1DomainWhoisDomainNameIsRegisteredOK creates a GetV1DomainWhoisDomainNameIsRegisteredOK with default headers values
func NewGetV1DomainWhoisDomainNameIsRegisteredOK() *GetV1DomainWhoisDomainNameIsRegisteredOK {
	return &GetV1DomainWhoisDomainNameIsRegisteredOK{}
}

/*
GetV1DomainWhoisDomainNameIsRegisteredOK describes a response with status code 200, with default header values.

OK
*/
type GetV1DomainWhoisDomainNameIsRegisteredOK struct {
	Payload *GetV1DomainWhoisDomainNameIsRegisteredOKBody
}

// IsSuccess returns true when this get v1 domain whois domain name is registered o k response has a 2xx status code
func (o *GetV1DomainWhoisDomainNameIsRegisteredOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get v1 domain whois domain name is registered o k response has a 3xx status code
func (o *GetV1DomainWhoisDomainNameIsRegisteredOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 domain whois domain name is registered o k response has a 4xx status code
func (o *GetV1DomainWhoisDomainNameIsRegisteredOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get v1 domain whois domain name is registered o k response has a 5xx status code
func (o *GetV1DomainWhoisDomainNameIsRegisteredOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 domain whois domain name is registered o k response a status code equal to that given
func (o *GetV1DomainWhoisDomainNameIsRegisteredOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get v1 domain whois domain name is registered o k response
func (o *GetV1DomainWhoisDomainNameIsRegisteredOK) Code() int {
	return 200
}

func (o *GetV1DomainWhoisDomainNameIsRegisteredOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/domain/whois/{domain-name}/is-registered][%d] getV1DomainWhoisDomainNameIsRegisteredOK %s", 200, payload)
}

func (o *GetV1DomainWhoisDomainNameIsRegisteredOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/domain/whois/{domain-name}/is-registered][%d] getV1DomainWhoisDomainNameIsRegisteredOK %s", 200, payload)
}

func (o *GetV1DomainWhoisDomainNameIsRegisteredOK) GetPayload() *GetV1DomainWhoisDomainNameIsRegisteredOKBody {
	return o.Payload
}

func (o *GetV1DomainWhoisDomainNameIsRegisteredOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetV1DomainWhoisDomainNameIsRegisteredOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1DomainWhoisDomainNameIsRegisteredBadRequest creates a GetV1DomainWhoisDomainNameIsRegisteredBadRequest with default headers values
func NewGetV1DomainWhoisDomainNameIsRegisteredBadRequest() *GetV1DomainWhoisDomainNameIsRegisteredBadRequest {
	return &GetV1DomainWhoisDomainNameIsRegisteredBadRequest{}
}

/*
GetV1DomainWhoisDomainNameIsRegisteredBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetV1DomainWhoisDomainNameIsRegisteredBadRequest struct {
	Payload interface{}
}

// IsSuccess returns true when this get v1 domain whois domain name is registered bad request response has a 2xx status code
func (o *GetV1DomainWhoisDomainNameIsRegisteredBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 domain whois domain name is registered bad request response has a 3xx status code
func (o *GetV1DomainWhoisDomainNameIsRegisteredBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 domain whois domain name is registered bad request response has a 4xx status code
func (o *GetV1DomainWhoisDomainNameIsRegisteredBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 domain whois domain name is registered bad request response has a 5xx status code
func (o *GetV1DomainWhoisDomainNameIsRegisteredBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 domain whois domain name is registered bad request response a status code equal to that given
func (o *GetV1DomainWhoisDomainNameIsRegisteredBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get v1 domain whois domain name is registered bad request response
func (o *GetV1DomainWhoisDomainNameIsRegisteredBadRequest) Code() int {
	return 400
}

func (o *GetV1DomainWhoisDomainNameIsRegisteredBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/domain/whois/{domain-name}/is-registered][%d] getV1DomainWhoisDomainNameIsRegisteredBadRequest %s", 400, payload)
}

func (o *GetV1DomainWhoisDomainNameIsRegisteredBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/domain/whois/{domain-name}/is-registered][%d] getV1DomainWhoisDomainNameIsRegisteredBadRequest %s", 400, payload)
}

func (o *GetV1DomainWhoisDomainNameIsRegisteredBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *GetV1DomainWhoisDomainNameIsRegisteredBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1DomainWhoisDomainNameIsRegisteredPaymentRequired creates a GetV1DomainWhoisDomainNameIsRegisteredPaymentRequired with default headers values
func NewGetV1DomainWhoisDomainNameIsRegisteredPaymentRequired() *GetV1DomainWhoisDomainNameIsRegisteredPaymentRequired {
	return &GetV1DomainWhoisDomainNameIsRegisteredPaymentRequired{}
}

/*
GetV1DomainWhoisDomainNameIsRegisteredPaymentRequired describes a response with status code 402, with default header values.

Payment Required
*/
type GetV1DomainWhoisDomainNameIsRegisteredPaymentRequired struct {
	Payload interface{}
}

// IsSuccess returns true when this get v1 domain whois domain name is registered payment required response has a 2xx status code
func (o *GetV1DomainWhoisDomainNameIsRegisteredPaymentRequired) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 domain whois domain name is registered payment required response has a 3xx status code
func (o *GetV1DomainWhoisDomainNameIsRegisteredPaymentRequired) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 domain whois domain name is registered payment required response has a 4xx status code
func (o *GetV1DomainWhoisDomainNameIsRegisteredPaymentRequired) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 domain whois domain name is registered payment required response has a 5xx status code
func (o *GetV1DomainWhoisDomainNameIsRegisteredPaymentRequired) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 domain whois domain name is registered payment required response a status code equal to that given
func (o *GetV1DomainWhoisDomainNameIsRegisteredPaymentRequired) IsCode(code int) bool {
	return code == 402
}

// Code gets the status code for the get v1 domain whois domain name is registered payment required response
func (o *GetV1DomainWhoisDomainNameIsRegisteredPaymentRequired) Code() int {
	return 402
}

func (o *GetV1DomainWhoisDomainNameIsRegisteredPaymentRequired) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/domain/whois/{domain-name}/is-registered][%d] getV1DomainWhoisDomainNameIsRegisteredPaymentRequired %s", 402, payload)
}

func (o *GetV1DomainWhoisDomainNameIsRegisteredPaymentRequired) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/domain/whois/{domain-name}/is-registered][%d] getV1DomainWhoisDomainNameIsRegisteredPaymentRequired %s", 402, payload)
}

func (o *GetV1DomainWhoisDomainNameIsRegisteredPaymentRequired) GetPayload() interface{} {
	return o.Payload
}

func (o *GetV1DomainWhoisDomainNameIsRegisteredPaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1DomainWhoisDomainNameIsRegisteredRequestTimeout creates a GetV1DomainWhoisDomainNameIsRegisteredRequestTimeout with default headers values
func NewGetV1DomainWhoisDomainNameIsRegisteredRequestTimeout() *GetV1DomainWhoisDomainNameIsRegisteredRequestTimeout {
	return &GetV1DomainWhoisDomainNameIsRegisteredRequestTimeout{}
}

/*
GetV1DomainWhoisDomainNameIsRegisteredRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type GetV1DomainWhoisDomainNameIsRegisteredRequestTimeout struct {
	Payload interface{}
}

// IsSuccess returns true when this get v1 domain whois domain name is registered request timeout response has a 2xx status code
func (o *GetV1DomainWhoisDomainNameIsRegisteredRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 domain whois domain name is registered request timeout response has a 3xx status code
func (o *GetV1DomainWhoisDomainNameIsRegisteredRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 domain whois domain name is registered request timeout response has a 4xx status code
func (o *GetV1DomainWhoisDomainNameIsRegisteredRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 domain whois domain name is registered request timeout response has a 5xx status code
func (o *GetV1DomainWhoisDomainNameIsRegisteredRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 domain whois domain name is registered request timeout response a status code equal to that given
func (o *GetV1DomainWhoisDomainNameIsRegisteredRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the get v1 domain whois domain name is registered request timeout response
func (o *GetV1DomainWhoisDomainNameIsRegisteredRequestTimeout) Code() int {
	return 408
}

func (o *GetV1DomainWhoisDomainNameIsRegisteredRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/domain/whois/{domain-name}/is-registered][%d] getV1DomainWhoisDomainNameIsRegisteredRequestTimeout %s", 408, payload)
}

func (o *GetV1DomainWhoisDomainNameIsRegisteredRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/domain/whois/{domain-name}/is-registered][%d] getV1DomainWhoisDomainNameIsRegisteredRequestTimeout %s", 408, payload)
}

func (o *GetV1DomainWhoisDomainNameIsRegisteredRequestTimeout) GetPayload() interface{} {
	return o.Payload
}

func (o *GetV1DomainWhoisDomainNameIsRegisteredRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1DomainWhoisDomainNameIsRegisteredInternalServerError creates a GetV1DomainWhoisDomainNameIsRegisteredInternalServerError with default headers values
func NewGetV1DomainWhoisDomainNameIsRegisteredInternalServerError() *GetV1DomainWhoisDomainNameIsRegisteredInternalServerError {
	return &GetV1DomainWhoisDomainNameIsRegisteredInternalServerError{}
}

/*
GetV1DomainWhoisDomainNameIsRegisteredInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetV1DomainWhoisDomainNameIsRegisteredInternalServerError struct {
	Payload interface{}
}

// IsSuccess returns true when this get v1 domain whois domain name is registered internal server error response has a 2xx status code
func (o *GetV1DomainWhoisDomainNameIsRegisteredInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 domain whois domain name is registered internal server error response has a 3xx status code
func (o *GetV1DomainWhoisDomainNameIsRegisteredInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 domain whois domain name is registered internal server error response has a 4xx status code
func (o *GetV1DomainWhoisDomainNameIsRegisteredInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get v1 domain whois domain name is registered internal server error response has a 5xx status code
func (o *GetV1DomainWhoisDomainNameIsRegisteredInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get v1 domain whois domain name is registered internal server error response a status code equal to that given
func (o *GetV1DomainWhoisDomainNameIsRegisteredInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get v1 domain whois domain name is registered internal server error response
func (o *GetV1DomainWhoisDomainNameIsRegisteredInternalServerError) Code() int {
	return 500
}

func (o *GetV1DomainWhoisDomainNameIsRegisteredInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/domain/whois/{domain-name}/is-registered][%d] getV1DomainWhoisDomainNameIsRegisteredInternalServerError %s", 500, payload)
}

func (o *GetV1DomainWhoisDomainNameIsRegisteredInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/domain/whois/{domain-name}/is-registered][%d] getV1DomainWhoisDomainNameIsRegisteredInternalServerError %s", 500, payload)
}

func (o *GetV1DomainWhoisDomainNameIsRegisteredInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *GetV1DomainWhoisDomainNameIsRegisteredInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetV1DomainWhoisDomainNameIsRegisteredOKBody get v1 domain whois domain name is registered o k body
swagger:model GetV1DomainWhoisDomainNameIsRegisteredOKBody
*/
type GetV1DomainWhoisDomainNameIsRegisteredOKBody struct {
	models.SchemaAPIResponse

	// data
	Data []*models.SchemaDomainWhoisResponse `json:"data"`

	// meta
	Meta *models.SchemaPaginationMeta `json:"meta,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetV1DomainWhoisDomainNameIsRegisteredOKBody) UnmarshalJSON(raw []byte) error {
	// GetV1DomainWhoisDomainNameIsRegisteredOKBodyAO0
	var getV1DomainWhoisDomainNameIsRegisteredOKBodyAO0 models.SchemaAPIResponse
	if err := swag.ReadJSON(raw, &getV1DomainWhoisDomainNameIsRegisteredOKBodyAO0); err != nil {
		return err
	}
	o.SchemaAPIResponse = getV1DomainWhoisDomainNameIsRegisteredOKBodyAO0

	// GetV1DomainWhoisDomainNameIsRegisteredOKBodyAO1
	var dataGetV1DomainWhoisDomainNameIsRegisteredOKBodyAO1 struct {
		Data []*models.SchemaDomainWhoisResponse `json:"data"`

		Meta *models.SchemaPaginationMeta `json:"meta,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataGetV1DomainWhoisDomainNameIsRegisteredOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetV1DomainWhoisDomainNameIsRegisteredOKBodyAO1.Data

	o.Meta = dataGetV1DomainWhoisDomainNameIsRegisteredOKBodyAO1.Meta

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetV1DomainWhoisDomainNameIsRegisteredOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getV1DomainWhoisDomainNameIsRegisteredOKBodyAO0, err := swag.WriteJSON(o.SchemaAPIResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getV1DomainWhoisDomainNameIsRegisteredOKBodyAO0)
	var dataGetV1DomainWhoisDomainNameIsRegisteredOKBodyAO1 struct {
		Data []*models.SchemaDomainWhoisResponse `json:"data"`

		Meta *models.SchemaPaginationMeta `json:"meta,omitempty"`
	}

	dataGetV1DomainWhoisDomainNameIsRegisteredOKBodyAO1.Data = o.Data

	dataGetV1DomainWhoisDomainNameIsRegisteredOKBodyAO1.Meta = o.Meta

	jsonDataGetV1DomainWhoisDomainNameIsRegisteredOKBodyAO1, errGetV1DomainWhoisDomainNameIsRegisteredOKBodyAO1 := swag.WriteJSON(dataGetV1DomainWhoisDomainNameIsRegisteredOKBodyAO1)
	if errGetV1DomainWhoisDomainNameIsRegisteredOKBodyAO1 != nil {
		return nil, errGetV1DomainWhoisDomainNameIsRegisteredOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetV1DomainWhoisDomainNameIsRegisteredOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get v1 domain whois domain name is registered o k body
func (o *GetV1DomainWhoisDomainNameIsRegisteredOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SchemaAPIResponse
	if err := o.SchemaAPIResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetV1DomainWhoisDomainNameIsRegisteredOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getV1DomainWhoisDomainNameIsRegisteredOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getV1DomainWhoisDomainNameIsRegisteredOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetV1DomainWhoisDomainNameIsRegisteredOKBody) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(o.Meta) { // not required
		return nil
	}

	if o.Meta != nil {
		if err := o.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getV1DomainWhoisDomainNameIsRegisteredOK" + "." + "meta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getV1DomainWhoisDomainNameIsRegisteredOK" + "." + "meta")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get v1 domain whois domain name is registered o k body based on the context it is used
func (o *GetV1DomainWhoisDomainNameIsRegisteredOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SchemaAPIResponse
	if err := o.SchemaAPIResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMeta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetV1DomainWhoisDomainNameIsRegisteredOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {

			if swag.IsZero(o.Data[i]) { // not required
				return nil
			}

			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getV1DomainWhoisDomainNameIsRegisteredOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getV1DomainWhoisDomainNameIsRegisteredOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetV1DomainWhoisDomainNameIsRegisteredOKBody) contextValidateMeta(ctx context.Context, formats strfmt.Registry) error {

	if o.Meta != nil {

		if swag.IsZero(o.Meta) { // not required
			return nil
		}

		if err := o.Meta.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getV1DomainWhoisDomainNameIsRegisteredOK" + "." + "meta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getV1DomainWhoisDomainNameIsRegisteredOK" + "." + "meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetV1DomainWhoisDomainNameIsRegisteredOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetV1DomainWhoisDomainNameIsRegisteredOKBody) UnmarshalBinary(b []byte) error {
	var res GetV1DomainWhoisDomainNameIsRegisteredOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
