// Code generated by go-swagger; DO NOT EDIT.

package domain

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new domain API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new domain API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new domain API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for domain API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetV1DomainWhoisDomainName(params *GetV1DomainWhoisDomainNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1DomainWhoisDomainNameOK, error)

	GetV1DomainWhoisDomainNameHistorical(params *GetV1DomainWhoisDomainNameHistoricalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1DomainWhoisDomainNameHistoricalOK, error)

	GetV1DomainWhoisDomainNameIsExpired(params *GetV1DomainWhoisDomainNameIsExpiredParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1DomainWhoisDomainNameIsExpiredOK, error)

	GetV1DomainWhoisDomainNameIsRegistered(params *GetV1DomainWhoisDomainNameIsRegisteredParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1DomainWhoisDomainNameIsRegisteredOK, error)

	PostV1DomainCount(params *PostV1DomainCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1DomainCountOK, error)

	PostV1DomainSearch(params *PostV1DomainSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1DomainSearchOK, error)

	PostV1DomainSubdomainCount(params *PostV1DomainSubdomainCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1DomainSubdomainCountOK, error)

	PostV1DomainSubdomainSearch(params *PostV1DomainSubdomainSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1DomainSubdomainSearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetV1DomainWhoisDomainName fetches the domain whois record details

Provides extensive details about the domain whois record like name servers, domain status, registrar, etc.
*/
func (a *Client) GetV1DomainWhoisDomainName(params *GetV1DomainWhoisDomainNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1DomainWhoisDomainNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1DomainWhoisDomainNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1DomainWhoisDomainName",
		Method:             "GET",
		PathPattern:        "/v1/domain/whois/{domain-name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1DomainWhoisDomainNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1DomainWhoisDomainNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1DomainWhoisDomainName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1DomainWhoisDomainNameHistorical fetches all the domain whois historical records

Provides historical details about the domain whois record like name servers, domain status, registrar, etc
*/
func (a *Client) GetV1DomainWhoisDomainNameHistorical(params *GetV1DomainWhoisDomainNameHistoricalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1DomainWhoisDomainNameHistoricalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1DomainWhoisDomainNameHistoricalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1DomainWhoisDomainNameHistorical",
		Method:             "GET",
		PathPattern:        "/v1/domain/whois/{domain-name}/historical",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1DomainWhoisDomainNameHistoricalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1DomainWhoisDomainNameHistoricalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1DomainWhoisDomainNameHistorical: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1DomainWhoisDomainNameIsExpired gets the expiry for a particular domain

Provides historical details about the domain whois record like name servers, domain status, registrar, etc
*/
func (a *Client) GetV1DomainWhoisDomainNameIsExpired(params *GetV1DomainWhoisDomainNameIsExpiredParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1DomainWhoisDomainNameIsExpiredOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1DomainWhoisDomainNameIsExpiredParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1DomainWhoisDomainNameIsExpired",
		Method:             "GET",
		PathPattern:        "/v1/domain/whois/{domain-name}/is-expired",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1DomainWhoisDomainNameIsExpiredReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1DomainWhoisDomainNameIsExpiredOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1DomainWhoisDomainNameIsExpired: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1DomainWhoisDomainNameIsRegistered fetches all the domain whois historical records

Provides historical details about the domain whois record like name servers, domain status, registrar, etc
*/
func (a *Client) GetV1DomainWhoisDomainNameIsRegistered(params *GetV1DomainWhoisDomainNameIsRegisteredParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1DomainWhoisDomainNameIsRegisteredOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1DomainWhoisDomainNameIsRegisteredParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1DomainWhoisDomainNameIsRegistered",
		Method:             "GET",
		PathPattern:        "/v1/domain/whois/{domain-name}/is-registered",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1DomainWhoisDomainNameIsRegisteredReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1DomainWhoisDomainNameIsRegisteredOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1DomainWhoisDomainNameIsRegistered: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1DomainCount gets domains count

Get count of domain records based on query
*/
func (a *Client) PostV1DomainCount(params *PostV1DomainCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1DomainCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1DomainCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1DomainCount",
		Method:             "POST",
		PathPattern:        "/v1/domain/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		AuthInfo:           authInfo,
		Reader:             &PostV1DomainCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1DomainCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1DomainCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1DomainSearch searches domains

Search domains based on the query
*/
func (a *Client) PostV1DomainSearch(params *PostV1DomainSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1DomainSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1DomainSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1DomainSearch",
		Method:             "POST",
		PathPattern:        "/v1/domain/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		AuthInfo:           authInfo,
		Reader:             &PostV1DomainSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1DomainSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1DomainSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1DomainSubdomainCount fetches the total no of subdomain records

Returns the count of subdomain records based on domain
*/
func (a *Client) PostV1DomainSubdomainCount(params *PostV1DomainSubdomainCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1DomainSubdomainCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1DomainSubdomainCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1DomainSubdomainCount",
		Method:             "POST",
		PathPattern:        "/v1/domain/subdomain/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1DomainSubdomainCountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1DomainSubdomainCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1DomainSubdomainCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1DomainSubdomainSearch fetches the subdomain record

Returns the subdomain records based on query
*/
func (a *Client) PostV1DomainSubdomainSearch(params *PostV1DomainSubdomainSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1DomainSubdomainSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1DomainSubdomainSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1DomainSubdomainSearch",
		Method:             "POST",
		PathPattern:        "/v1/domain/subdomain/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1DomainSubdomainSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1DomainSubdomainSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1DomainSubdomainSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
