// Code generated by go-swagger; DO NOT EDIT.

package domain

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cybledev/odin-sdk-go/models"
)

// PostV1DomainSubdomainSearchReader is a Reader for the PostV1DomainSubdomainSearch structure.
type PostV1DomainSubdomainSearchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostV1DomainSubdomainSearchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostV1DomainSubdomainSearchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostV1DomainSubdomainSearchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostV1DomainSubdomainSearchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/domain/subdomain/search] PostV1DomainSubdomainSearch", response, response.Code())
	}
}

// NewPostV1DomainSubdomainSearchOK creates a PostV1DomainSubdomainSearchOK with default headers values
func NewPostV1DomainSubdomainSearchOK() *PostV1DomainSubdomainSearchOK {
	return &PostV1DomainSubdomainSearchOK{}
}

/*
PostV1DomainSubdomainSearchOK describes a response with status code 200, with default header values.

OK
*/
type PostV1DomainSubdomainSearchOK struct {
	Payload *PostV1DomainSubdomainSearchOKBody
}

// IsSuccess returns true when this post v1 domain subdomain search o k response has a 2xx status code
func (o *PostV1DomainSubdomainSearchOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post v1 domain subdomain search o k response has a 3xx status code
func (o *PostV1DomainSubdomainSearchOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 domain subdomain search o k response has a 4xx status code
func (o *PostV1DomainSubdomainSearchOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v1 domain subdomain search o k response has a 5xx status code
func (o *PostV1DomainSubdomainSearchOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 domain subdomain search o k response a status code equal to that given
func (o *PostV1DomainSubdomainSearchOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post v1 domain subdomain search o k response
func (o *PostV1DomainSubdomainSearchOK) Code() int {
	return 200
}

func (o *PostV1DomainSubdomainSearchOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/domain/subdomain/search][%d] postV1DomainSubdomainSearchOK %s", 200, payload)
}

func (o *PostV1DomainSubdomainSearchOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/domain/subdomain/search][%d] postV1DomainSubdomainSearchOK %s", 200, payload)
}

func (o *PostV1DomainSubdomainSearchOK) GetPayload() *PostV1DomainSubdomainSearchOKBody {
	return o.Payload
}

func (o *PostV1DomainSubdomainSearchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostV1DomainSubdomainSearchOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1DomainSubdomainSearchBadRequest creates a PostV1DomainSubdomainSearchBadRequest with default headers values
func NewPostV1DomainSubdomainSearchBadRequest() *PostV1DomainSubdomainSearchBadRequest {
	return &PostV1DomainSubdomainSearchBadRequest{}
}

/*
PostV1DomainSubdomainSearchBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostV1DomainSubdomainSearchBadRequest struct {
	Payload *models.DNSErrorResponse
}

// IsSuccess returns true when this post v1 domain subdomain search bad request response has a 2xx status code
func (o *PostV1DomainSubdomainSearchBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 domain subdomain search bad request response has a 3xx status code
func (o *PostV1DomainSubdomainSearchBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 domain subdomain search bad request response has a 4xx status code
func (o *PostV1DomainSubdomainSearchBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 domain subdomain search bad request response has a 5xx status code
func (o *PostV1DomainSubdomainSearchBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 domain subdomain search bad request response a status code equal to that given
func (o *PostV1DomainSubdomainSearchBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post v1 domain subdomain search bad request response
func (o *PostV1DomainSubdomainSearchBadRequest) Code() int {
	return 400
}

func (o *PostV1DomainSubdomainSearchBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/domain/subdomain/search][%d] postV1DomainSubdomainSearchBadRequest %s", 400, payload)
}

func (o *PostV1DomainSubdomainSearchBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/domain/subdomain/search][%d] postV1DomainSubdomainSearchBadRequest %s", 400, payload)
}

func (o *PostV1DomainSubdomainSearchBadRequest) GetPayload() *models.DNSErrorResponse {
	return o.Payload
}

func (o *PostV1DomainSubdomainSearchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DNSErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1DomainSubdomainSearchInternalServerError creates a PostV1DomainSubdomainSearchInternalServerError with default headers values
func NewPostV1DomainSubdomainSearchInternalServerError() *PostV1DomainSubdomainSearchInternalServerError {
	return &PostV1DomainSubdomainSearchInternalServerError{}
}

/*
PostV1DomainSubdomainSearchInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostV1DomainSubdomainSearchInternalServerError struct {
	Payload *models.DNSErrorResponse
}

// IsSuccess returns true when this post v1 domain subdomain search internal server error response has a 2xx status code
func (o *PostV1DomainSubdomainSearchInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 domain subdomain search internal server error response has a 3xx status code
func (o *PostV1DomainSubdomainSearchInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 domain subdomain search internal server error response has a 4xx status code
func (o *PostV1DomainSubdomainSearchInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v1 domain subdomain search internal server error response has a 5xx status code
func (o *PostV1DomainSubdomainSearchInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post v1 domain subdomain search internal server error response a status code equal to that given
func (o *PostV1DomainSubdomainSearchInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post v1 domain subdomain search internal server error response
func (o *PostV1DomainSubdomainSearchInternalServerError) Code() int {
	return 500
}

func (o *PostV1DomainSubdomainSearchInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/domain/subdomain/search][%d] postV1DomainSubdomainSearchInternalServerError %s", 500, payload)
}

func (o *PostV1DomainSubdomainSearchInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/domain/subdomain/search][%d] postV1DomainSubdomainSearchInternalServerError %s", 500, payload)
}

func (o *PostV1DomainSubdomainSearchInternalServerError) GetPayload() *models.DNSErrorResponse {
	return o.Payload
}

func (o *PostV1DomainSubdomainSearchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DNSErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostV1DomainSubdomainSearchOKBody post v1 domain subdomain search o k body
swagger:model PostV1DomainSubdomainSearchOKBody
*/
type PostV1DomainSubdomainSearchOKBody struct {
	models.DNSAPIResponse

	// data
	Data []string `json:"data"`

	// pagination
	Pagination *models.DNSSearchPagination `json:"pagination,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostV1DomainSubdomainSearchOKBody) UnmarshalJSON(raw []byte) error {
	// PostV1DomainSubdomainSearchOKBodyAO0
	var postV1DomainSubdomainSearchOKBodyAO0 models.DNSAPIResponse
	if err := swag.ReadJSON(raw, &postV1DomainSubdomainSearchOKBodyAO0); err != nil {
		return err
	}
	o.DNSAPIResponse = postV1DomainSubdomainSearchOKBodyAO0

	// PostV1DomainSubdomainSearchOKBodyAO1
	var dataPostV1DomainSubdomainSearchOKBodyAO1 struct {
		Data []string `json:"data"`

		Pagination *models.DNSSearchPagination `json:"pagination,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostV1DomainSubdomainSearchOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostV1DomainSubdomainSearchOKBodyAO1.Data

	o.Pagination = dataPostV1DomainSubdomainSearchOKBodyAO1.Pagination

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostV1DomainSubdomainSearchOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postV1DomainSubdomainSearchOKBodyAO0, err := swag.WriteJSON(o.DNSAPIResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postV1DomainSubdomainSearchOKBodyAO0)
	var dataPostV1DomainSubdomainSearchOKBodyAO1 struct {
		Data []string `json:"data"`

		Pagination *models.DNSSearchPagination `json:"pagination,omitempty"`
	}

	dataPostV1DomainSubdomainSearchOKBodyAO1.Data = o.Data

	dataPostV1DomainSubdomainSearchOKBodyAO1.Pagination = o.Pagination

	jsonDataPostV1DomainSubdomainSearchOKBodyAO1, errPostV1DomainSubdomainSearchOKBodyAO1 := swag.WriteJSON(dataPostV1DomainSubdomainSearchOKBodyAO1)
	if errPostV1DomainSubdomainSearchOKBodyAO1 != nil {
		return nil, errPostV1DomainSubdomainSearchOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostV1DomainSubdomainSearchOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post v1 domain subdomain search o k body
func (o *PostV1DomainSubdomainSearchOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.DNSAPIResponse
	if err := o.DNSAPIResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostV1DomainSubdomainSearchOKBody) validatePagination(formats strfmt.Registry) error {

	if swag.IsZero(o.Pagination) { // not required
		return nil
	}

	if o.Pagination != nil {
		if err := o.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postV1DomainSubdomainSearchOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postV1DomainSubdomainSearchOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post v1 domain subdomain search o k body based on the context it is used
func (o *PostV1DomainSubdomainSearchOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.DNSAPIResponse
	if err := o.DNSAPIResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostV1DomainSubdomainSearchOKBody) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if o.Pagination != nil {

		if swag.IsZero(o.Pagination) { // not required
			return nil
		}

		if err := o.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postV1DomainSubdomainSearchOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postV1DomainSubdomainSearchOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostV1DomainSubdomainSearchOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostV1DomainSubdomainSearchOKBody) UnmarshalBinary(b []byte) error {
	var res PostV1DomainSubdomainSearchOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
