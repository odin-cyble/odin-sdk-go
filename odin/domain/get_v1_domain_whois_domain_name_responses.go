// Code generated by go-swagger; DO NOT EDIT.

package domain

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cybledev/odin-sdk-go/models"
)

// GetV1DomainWhoisDomainNameReader is a Reader for the GetV1DomainWhoisDomainName structure.
type GetV1DomainWhoisDomainNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetV1DomainWhoisDomainNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetV1DomainWhoisDomainNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetV1DomainWhoisDomainNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 402:
		result := NewGetV1DomainWhoisDomainNamePaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetV1DomainWhoisDomainNameRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetV1DomainWhoisDomainNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/domain/whois/{domain-name}] GetV1DomainWhoisDomainName", response, response.Code())
	}
}

// NewGetV1DomainWhoisDomainNameOK creates a GetV1DomainWhoisDomainNameOK with default headers values
func NewGetV1DomainWhoisDomainNameOK() *GetV1DomainWhoisDomainNameOK {
	return &GetV1DomainWhoisDomainNameOK{}
}

/*
GetV1DomainWhoisDomainNameOK describes a response with status code 200, with default header values.

OK
*/
type GetV1DomainWhoisDomainNameOK struct {
	Payload *GetV1DomainWhoisDomainNameOKBody
}

// IsSuccess returns true when this get v1 domain whois domain name o k response has a 2xx status code
func (o *GetV1DomainWhoisDomainNameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get v1 domain whois domain name o k response has a 3xx status code
func (o *GetV1DomainWhoisDomainNameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 domain whois domain name o k response has a 4xx status code
func (o *GetV1DomainWhoisDomainNameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get v1 domain whois domain name o k response has a 5xx status code
func (o *GetV1DomainWhoisDomainNameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 domain whois domain name o k response a status code equal to that given
func (o *GetV1DomainWhoisDomainNameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get v1 domain whois domain name o k response
func (o *GetV1DomainWhoisDomainNameOK) Code() int {
	return 200
}

func (o *GetV1DomainWhoisDomainNameOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/domain/whois/{domain-name}][%d] getV1DomainWhoisDomainNameOK %s", 200, payload)
}

func (o *GetV1DomainWhoisDomainNameOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/domain/whois/{domain-name}][%d] getV1DomainWhoisDomainNameOK %s", 200, payload)
}

func (o *GetV1DomainWhoisDomainNameOK) GetPayload() *GetV1DomainWhoisDomainNameOKBody {
	return o.Payload
}

func (o *GetV1DomainWhoisDomainNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetV1DomainWhoisDomainNameOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1DomainWhoisDomainNameBadRequest creates a GetV1DomainWhoisDomainNameBadRequest with default headers values
func NewGetV1DomainWhoisDomainNameBadRequest() *GetV1DomainWhoisDomainNameBadRequest {
	return &GetV1DomainWhoisDomainNameBadRequest{}
}

/*
GetV1DomainWhoisDomainNameBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetV1DomainWhoisDomainNameBadRequest struct {
	Payload interface{}
}

// IsSuccess returns true when this get v1 domain whois domain name bad request response has a 2xx status code
func (o *GetV1DomainWhoisDomainNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 domain whois domain name bad request response has a 3xx status code
func (o *GetV1DomainWhoisDomainNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 domain whois domain name bad request response has a 4xx status code
func (o *GetV1DomainWhoisDomainNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 domain whois domain name bad request response has a 5xx status code
func (o *GetV1DomainWhoisDomainNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 domain whois domain name bad request response a status code equal to that given
func (o *GetV1DomainWhoisDomainNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get v1 domain whois domain name bad request response
func (o *GetV1DomainWhoisDomainNameBadRequest) Code() int {
	return 400
}

func (o *GetV1DomainWhoisDomainNameBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/domain/whois/{domain-name}][%d] getV1DomainWhoisDomainNameBadRequest %s", 400, payload)
}

func (o *GetV1DomainWhoisDomainNameBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/domain/whois/{domain-name}][%d] getV1DomainWhoisDomainNameBadRequest %s", 400, payload)
}

func (o *GetV1DomainWhoisDomainNameBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *GetV1DomainWhoisDomainNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1DomainWhoisDomainNamePaymentRequired creates a GetV1DomainWhoisDomainNamePaymentRequired with default headers values
func NewGetV1DomainWhoisDomainNamePaymentRequired() *GetV1DomainWhoisDomainNamePaymentRequired {
	return &GetV1DomainWhoisDomainNamePaymentRequired{}
}

/*
GetV1DomainWhoisDomainNamePaymentRequired describes a response with status code 402, with default header values.

Payment Required
*/
type GetV1DomainWhoisDomainNamePaymentRequired struct {
	Payload interface{}
}

// IsSuccess returns true when this get v1 domain whois domain name payment required response has a 2xx status code
func (o *GetV1DomainWhoisDomainNamePaymentRequired) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 domain whois domain name payment required response has a 3xx status code
func (o *GetV1DomainWhoisDomainNamePaymentRequired) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 domain whois domain name payment required response has a 4xx status code
func (o *GetV1DomainWhoisDomainNamePaymentRequired) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 domain whois domain name payment required response has a 5xx status code
func (o *GetV1DomainWhoisDomainNamePaymentRequired) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 domain whois domain name payment required response a status code equal to that given
func (o *GetV1DomainWhoisDomainNamePaymentRequired) IsCode(code int) bool {
	return code == 402
}

// Code gets the status code for the get v1 domain whois domain name payment required response
func (o *GetV1DomainWhoisDomainNamePaymentRequired) Code() int {
	return 402
}

func (o *GetV1DomainWhoisDomainNamePaymentRequired) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/domain/whois/{domain-name}][%d] getV1DomainWhoisDomainNamePaymentRequired %s", 402, payload)
}

func (o *GetV1DomainWhoisDomainNamePaymentRequired) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/domain/whois/{domain-name}][%d] getV1DomainWhoisDomainNamePaymentRequired %s", 402, payload)
}

func (o *GetV1DomainWhoisDomainNamePaymentRequired) GetPayload() interface{} {
	return o.Payload
}

func (o *GetV1DomainWhoisDomainNamePaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1DomainWhoisDomainNameRequestTimeout creates a GetV1DomainWhoisDomainNameRequestTimeout with default headers values
func NewGetV1DomainWhoisDomainNameRequestTimeout() *GetV1DomainWhoisDomainNameRequestTimeout {
	return &GetV1DomainWhoisDomainNameRequestTimeout{}
}

/*
GetV1DomainWhoisDomainNameRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type GetV1DomainWhoisDomainNameRequestTimeout struct {
	Payload interface{}
}

// IsSuccess returns true when this get v1 domain whois domain name request timeout response has a 2xx status code
func (o *GetV1DomainWhoisDomainNameRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 domain whois domain name request timeout response has a 3xx status code
func (o *GetV1DomainWhoisDomainNameRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 domain whois domain name request timeout response has a 4xx status code
func (o *GetV1DomainWhoisDomainNameRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 domain whois domain name request timeout response has a 5xx status code
func (o *GetV1DomainWhoisDomainNameRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 domain whois domain name request timeout response a status code equal to that given
func (o *GetV1DomainWhoisDomainNameRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the get v1 domain whois domain name request timeout response
func (o *GetV1DomainWhoisDomainNameRequestTimeout) Code() int {
	return 408
}

func (o *GetV1DomainWhoisDomainNameRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/domain/whois/{domain-name}][%d] getV1DomainWhoisDomainNameRequestTimeout %s", 408, payload)
}

func (o *GetV1DomainWhoisDomainNameRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/domain/whois/{domain-name}][%d] getV1DomainWhoisDomainNameRequestTimeout %s", 408, payload)
}

func (o *GetV1DomainWhoisDomainNameRequestTimeout) GetPayload() interface{} {
	return o.Payload
}

func (o *GetV1DomainWhoisDomainNameRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1DomainWhoisDomainNameInternalServerError creates a GetV1DomainWhoisDomainNameInternalServerError with default headers values
func NewGetV1DomainWhoisDomainNameInternalServerError() *GetV1DomainWhoisDomainNameInternalServerError {
	return &GetV1DomainWhoisDomainNameInternalServerError{}
}

/*
GetV1DomainWhoisDomainNameInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetV1DomainWhoisDomainNameInternalServerError struct {
	Payload interface{}
}

// IsSuccess returns true when this get v1 domain whois domain name internal server error response has a 2xx status code
func (o *GetV1DomainWhoisDomainNameInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 domain whois domain name internal server error response has a 3xx status code
func (o *GetV1DomainWhoisDomainNameInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 domain whois domain name internal server error response has a 4xx status code
func (o *GetV1DomainWhoisDomainNameInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get v1 domain whois domain name internal server error response has a 5xx status code
func (o *GetV1DomainWhoisDomainNameInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get v1 domain whois domain name internal server error response a status code equal to that given
func (o *GetV1DomainWhoisDomainNameInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get v1 domain whois domain name internal server error response
func (o *GetV1DomainWhoisDomainNameInternalServerError) Code() int {
	return 500
}

func (o *GetV1DomainWhoisDomainNameInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/domain/whois/{domain-name}][%d] getV1DomainWhoisDomainNameInternalServerError %s", 500, payload)
}

func (o *GetV1DomainWhoisDomainNameInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/domain/whois/{domain-name}][%d] getV1DomainWhoisDomainNameInternalServerError %s", 500, payload)
}

func (o *GetV1DomainWhoisDomainNameInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *GetV1DomainWhoisDomainNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetV1DomainWhoisDomainNameOKBody get v1 domain whois domain name o k body
swagger:model GetV1DomainWhoisDomainNameOKBody
*/
type GetV1DomainWhoisDomainNameOKBody struct {
	models.SchemaAPIResponse

	// data
	Data *models.SchemaDomainWhoisResponse `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetV1DomainWhoisDomainNameOKBody) UnmarshalJSON(raw []byte) error {
	// GetV1DomainWhoisDomainNameOKBodyAO0
	var getV1DomainWhoisDomainNameOKBodyAO0 models.SchemaAPIResponse
	if err := swag.ReadJSON(raw, &getV1DomainWhoisDomainNameOKBodyAO0); err != nil {
		return err
	}
	o.SchemaAPIResponse = getV1DomainWhoisDomainNameOKBodyAO0

	// GetV1DomainWhoisDomainNameOKBodyAO1
	var dataGetV1DomainWhoisDomainNameOKBodyAO1 struct {
		Data *models.SchemaDomainWhoisResponse `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataGetV1DomainWhoisDomainNameOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetV1DomainWhoisDomainNameOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetV1DomainWhoisDomainNameOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getV1DomainWhoisDomainNameOKBodyAO0, err := swag.WriteJSON(o.SchemaAPIResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getV1DomainWhoisDomainNameOKBodyAO0)
	var dataGetV1DomainWhoisDomainNameOKBodyAO1 struct {
		Data *models.SchemaDomainWhoisResponse `json:"data,omitempty"`
	}

	dataGetV1DomainWhoisDomainNameOKBodyAO1.Data = o.Data

	jsonDataGetV1DomainWhoisDomainNameOKBodyAO1, errGetV1DomainWhoisDomainNameOKBodyAO1 := swag.WriteJSON(dataGetV1DomainWhoisDomainNameOKBodyAO1)
	if errGetV1DomainWhoisDomainNameOKBodyAO1 != nil {
		return nil, errGetV1DomainWhoisDomainNameOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetV1DomainWhoisDomainNameOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get v1 domain whois domain name o k body
func (o *GetV1DomainWhoisDomainNameOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SchemaAPIResponse
	if err := o.SchemaAPIResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetV1DomainWhoisDomainNameOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getV1DomainWhoisDomainNameOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getV1DomainWhoisDomainNameOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get v1 domain whois domain name o k body based on the context it is used
func (o *GetV1DomainWhoisDomainNameOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SchemaAPIResponse
	if err := o.SchemaAPIResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetV1DomainWhoisDomainNameOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if swag.IsZero(o.Data) { // not required
			return nil
		}

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getV1DomainWhoisDomainNameOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getV1DomainWhoisDomainNameOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetV1DomainWhoisDomainNameOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetV1DomainWhoisDomainNameOKBody) UnmarshalBinary(b []byte) error {
	var res GetV1DomainWhoisDomainNameOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
