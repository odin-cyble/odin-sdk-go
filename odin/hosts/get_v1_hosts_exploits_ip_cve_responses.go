// Code generated by go-swagger; DO NOT EDIT.

package hosts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cybledev/odin-sdk-go/models"
)

// GetV1HostsExploitsIPCveReader is a Reader for the GetV1HostsExploitsIPCve structure.
type GetV1HostsExploitsIPCveReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetV1HostsExploitsIPCveReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetV1HostsExploitsIPCveOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetV1HostsExploitsIPCveBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetV1HostsExploitsIPCveRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetV1HostsExploitsIPCveInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/hosts/exploits/{ip}/{cve}] GetV1HostsExploitsIPCve", response, response.Code())
	}
}

// NewGetV1HostsExploitsIPCveOK creates a GetV1HostsExploitsIPCveOK with default headers values
func NewGetV1HostsExploitsIPCveOK() *GetV1HostsExploitsIPCveOK {
	return &GetV1HostsExploitsIPCveOK{}
}

/*
GetV1HostsExploitsIPCveOK describes a response with status code 200, with default header values.

OK
*/
type GetV1HostsExploitsIPCveOK struct {
	Payload *GetV1HostsExploitsIPCveOKBody
}

// IsSuccess returns true when this get v1 hosts exploits Ip cve o k response has a 2xx status code
func (o *GetV1HostsExploitsIPCveOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get v1 hosts exploits Ip cve o k response has a 3xx status code
func (o *GetV1HostsExploitsIPCveOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 hosts exploits Ip cve o k response has a 4xx status code
func (o *GetV1HostsExploitsIPCveOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get v1 hosts exploits Ip cve o k response has a 5xx status code
func (o *GetV1HostsExploitsIPCveOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 hosts exploits Ip cve o k response a status code equal to that given
func (o *GetV1HostsExploitsIPCveOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get v1 hosts exploits Ip cve o k response
func (o *GetV1HostsExploitsIPCveOK) Code() int {
	return 200
}

func (o *GetV1HostsExploitsIPCveOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/hosts/exploits/{ip}/{cve}][%d] getV1HostsExploitsIpCveOK %s", 200, payload)
}

func (o *GetV1HostsExploitsIPCveOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/hosts/exploits/{ip}/{cve}][%d] getV1HostsExploitsIpCveOK %s", 200, payload)
}

func (o *GetV1HostsExploitsIPCveOK) GetPayload() *GetV1HostsExploitsIPCveOKBody {
	return o.Payload
}

func (o *GetV1HostsExploitsIPCveOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetV1HostsExploitsIPCveOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1HostsExploitsIPCveBadRequest creates a GetV1HostsExploitsIPCveBadRequest with default headers values
func NewGetV1HostsExploitsIPCveBadRequest() *GetV1HostsExploitsIPCveBadRequest {
	return &GetV1HostsExploitsIPCveBadRequest{}
}

/*
GetV1HostsExploitsIPCveBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetV1HostsExploitsIPCveBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get v1 hosts exploits Ip cve bad request response has a 2xx status code
func (o *GetV1HostsExploitsIPCveBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 hosts exploits Ip cve bad request response has a 3xx status code
func (o *GetV1HostsExploitsIPCveBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 hosts exploits Ip cve bad request response has a 4xx status code
func (o *GetV1HostsExploitsIPCveBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 hosts exploits Ip cve bad request response has a 5xx status code
func (o *GetV1HostsExploitsIPCveBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 hosts exploits Ip cve bad request response a status code equal to that given
func (o *GetV1HostsExploitsIPCveBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get v1 hosts exploits Ip cve bad request response
func (o *GetV1HostsExploitsIPCveBadRequest) Code() int {
	return 400
}

func (o *GetV1HostsExploitsIPCveBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/hosts/exploits/{ip}/{cve}][%d] getV1HostsExploitsIpCveBadRequest %s", 400, payload)
}

func (o *GetV1HostsExploitsIPCveBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/hosts/exploits/{ip}/{cve}][%d] getV1HostsExploitsIpCveBadRequest %s", 400, payload)
}

func (o *GetV1HostsExploitsIPCveBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetV1HostsExploitsIPCveBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1HostsExploitsIPCveRequestTimeout creates a GetV1HostsExploitsIPCveRequestTimeout with default headers values
func NewGetV1HostsExploitsIPCveRequestTimeout() *GetV1HostsExploitsIPCveRequestTimeout {
	return &GetV1HostsExploitsIPCveRequestTimeout{}
}

/*
GetV1HostsExploitsIPCveRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type GetV1HostsExploitsIPCveRequestTimeout struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get v1 hosts exploits Ip cve request timeout response has a 2xx status code
func (o *GetV1HostsExploitsIPCveRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 hosts exploits Ip cve request timeout response has a 3xx status code
func (o *GetV1HostsExploitsIPCveRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 hosts exploits Ip cve request timeout response has a 4xx status code
func (o *GetV1HostsExploitsIPCveRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 hosts exploits Ip cve request timeout response has a 5xx status code
func (o *GetV1HostsExploitsIPCveRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 hosts exploits Ip cve request timeout response a status code equal to that given
func (o *GetV1HostsExploitsIPCveRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the get v1 hosts exploits Ip cve request timeout response
func (o *GetV1HostsExploitsIPCveRequestTimeout) Code() int {
	return 408
}

func (o *GetV1HostsExploitsIPCveRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/hosts/exploits/{ip}/{cve}][%d] getV1HostsExploitsIpCveRequestTimeout %s", 408, payload)
}

func (o *GetV1HostsExploitsIPCveRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/hosts/exploits/{ip}/{cve}][%d] getV1HostsExploitsIpCveRequestTimeout %s", 408, payload)
}

func (o *GetV1HostsExploitsIPCveRequestTimeout) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetV1HostsExploitsIPCveRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1HostsExploitsIPCveInternalServerError creates a GetV1HostsExploitsIPCveInternalServerError with default headers values
func NewGetV1HostsExploitsIPCveInternalServerError() *GetV1HostsExploitsIPCveInternalServerError {
	return &GetV1HostsExploitsIPCveInternalServerError{}
}

/*
GetV1HostsExploitsIPCveInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetV1HostsExploitsIPCveInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get v1 hosts exploits Ip cve internal server error response has a 2xx status code
func (o *GetV1HostsExploitsIPCveInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 hosts exploits Ip cve internal server error response has a 3xx status code
func (o *GetV1HostsExploitsIPCveInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 hosts exploits Ip cve internal server error response has a 4xx status code
func (o *GetV1HostsExploitsIPCveInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get v1 hosts exploits Ip cve internal server error response has a 5xx status code
func (o *GetV1HostsExploitsIPCveInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get v1 hosts exploits Ip cve internal server error response a status code equal to that given
func (o *GetV1HostsExploitsIPCveInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get v1 hosts exploits Ip cve internal server error response
func (o *GetV1HostsExploitsIPCveInternalServerError) Code() int {
	return 500
}

func (o *GetV1HostsExploitsIPCveInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/hosts/exploits/{ip}/{cve}][%d] getV1HostsExploitsIpCveInternalServerError %s", 500, payload)
}

func (o *GetV1HostsExploitsIPCveInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/hosts/exploits/{ip}/{cve}][%d] getV1HostsExploitsIpCveInternalServerError %s", 500, payload)
}

func (o *GetV1HostsExploitsIPCveInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetV1HostsExploitsIPCveInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetV1HostsExploitsIPCveOKBody get v1 hosts exploits IP cve o k body
swagger:model GetV1HostsExploitsIPCveOKBody
*/
type GetV1HostsExploitsIPCveOKBody struct {
	models.APIResponse

	// data
	Data []*models.VisionExploitDetails `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetV1HostsExploitsIPCveOKBody) UnmarshalJSON(raw []byte) error {
	// GetV1HostsExploitsIPCveOKBodyAO0
	var getV1HostsExploitsIPCveOKBodyAO0 models.APIResponse
	if err := swag.ReadJSON(raw, &getV1HostsExploitsIPCveOKBodyAO0); err != nil {
		return err
	}
	o.APIResponse = getV1HostsExploitsIPCveOKBodyAO0

	// GetV1HostsExploitsIPCveOKBodyAO1
	var dataGetV1HostsExploitsIPCveOKBodyAO1 struct {
		Data []*models.VisionExploitDetails `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataGetV1HostsExploitsIPCveOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetV1HostsExploitsIPCveOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetV1HostsExploitsIPCveOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getV1HostsExploitsIPCveOKBodyAO0, err := swag.WriteJSON(o.APIResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getV1HostsExploitsIPCveOKBodyAO0)
	var dataGetV1HostsExploitsIPCveOKBodyAO1 struct {
		Data []*models.VisionExploitDetails `json:"data"`
	}

	dataGetV1HostsExploitsIPCveOKBodyAO1.Data = o.Data

	jsonDataGetV1HostsExploitsIPCveOKBodyAO1, errGetV1HostsExploitsIPCveOKBodyAO1 := swag.WriteJSON(dataGetV1HostsExploitsIPCveOKBodyAO1)
	if errGetV1HostsExploitsIPCveOKBodyAO1 != nil {
		return nil, errGetV1HostsExploitsIPCveOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetV1HostsExploitsIPCveOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get v1 hosts exploits IP cve o k body
func (o *GetV1HostsExploitsIPCveOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.APIResponse
	if err := o.APIResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetV1HostsExploitsIPCveOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getV1HostsExploitsIpCveOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getV1HostsExploitsIpCveOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get v1 hosts exploits IP cve o k body based on the context it is used
func (o *GetV1HostsExploitsIPCveOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.APIResponse
	if err := o.APIResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetV1HostsExploitsIPCveOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {

			if swag.IsZero(o.Data[i]) { // not required
				return nil
			}

			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getV1HostsExploitsIpCveOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getV1HostsExploitsIpCveOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetV1HostsExploitsIPCveOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetV1HostsExploitsIPCveOKBody) UnmarshalBinary(b []byte) error {
	var res GetV1HostsExploitsIPCveOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
