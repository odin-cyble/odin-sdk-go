// Code generated by go-swagger; DO NOT EDIT.

package hosts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cybledev/odin-sdk-go/models"
)

// GetV1CvesAllIPPageReader is a Reader for the GetV1CvesAllIPPage structure.
type GetV1CvesAllIPPageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetV1CvesAllIPPageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetV1CvesAllIPPageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetV1CvesAllIPPageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 402:
		result := NewGetV1CvesAllIPPagePaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetV1CvesAllIPPageRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetV1CvesAllIPPageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/cves/all/{ip}/{page}] GetV1CvesAllIPPage", response, response.Code())
	}
}

// NewGetV1CvesAllIPPageOK creates a GetV1CvesAllIPPageOK with default headers values
func NewGetV1CvesAllIPPageOK() *GetV1CvesAllIPPageOK {
	return &GetV1CvesAllIPPageOK{}
}

/*
GetV1CvesAllIPPageOK describes a response with status code 200, with default header values.

OK
*/
type GetV1CvesAllIPPageOK struct {
	Payload *models.IpservicesIPCveResponse
}

// IsSuccess returns true when this get v1 cves all Ip page o k response has a 2xx status code
func (o *GetV1CvesAllIPPageOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get v1 cves all Ip page o k response has a 3xx status code
func (o *GetV1CvesAllIPPageOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 cves all Ip page o k response has a 4xx status code
func (o *GetV1CvesAllIPPageOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get v1 cves all Ip page o k response has a 5xx status code
func (o *GetV1CvesAllIPPageOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 cves all Ip page o k response a status code equal to that given
func (o *GetV1CvesAllIPPageOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get v1 cves all Ip page o k response
func (o *GetV1CvesAllIPPageOK) Code() int {
	return 200
}

func (o *GetV1CvesAllIPPageOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/cves/all/{ip}/{page}][%d] getV1CvesAllIpPageOK %s", 200, payload)
}

func (o *GetV1CvesAllIPPageOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/cves/all/{ip}/{page}][%d] getV1CvesAllIpPageOK %s", 200, payload)
}

func (o *GetV1CvesAllIPPageOK) GetPayload() *models.IpservicesIPCveResponse {
	return o.Payload
}

func (o *GetV1CvesAllIPPageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IpservicesIPCveResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1CvesAllIPPageBadRequest creates a GetV1CvesAllIPPageBadRequest with default headers values
func NewGetV1CvesAllIPPageBadRequest() *GetV1CvesAllIPPageBadRequest {
	return &GetV1CvesAllIPPageBadRequest{}
}

/*
GetV1CvesAllIPPageBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetV1CvesAllIPPageBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get v1 cves all Ip page bad request response has a 2xx status code
func (o *GetV1CvesAllIPPageBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 cves all Ip page bad request response has a 3xx status code
func (o *GetV1CvesAllIPPageBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 cves all Ip page bad request response has a 4xx status code
func (o *GetV1CvesAllIPPageBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 cves all Ip page bad request response has a 5xx status code
func (o *GetV1CvesAllIPPageBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 cves all Ip page bad request response a status code equal to that given
func (o *GetV1CvesAllIPPageBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get v1 cves all Ip page bad request response
func (o *GetV1CvesAllIPPageBadRequest) Code() int {
	return 400
}

func (o *GetV1CvesAllIPPageBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/cves/all/{ip}/{page}][%d] getV1CvesAllIpPageBadRequest %s", 400, payload)
}

func (o *GetV1CvesAllIPPageBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/cves/all/{ip}/{page}][%d] getV1CvesAllIpPageBadRequest %s", 400, payload)
}

func (o *GetV1CvesAllIPPageBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetV1CvesAllIPPageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1CvesAllIPPagePaymentRequired creates a GetV1CvesAllIPPagePaymentRequired with default headers values
func NewGetV1CvesAllIPPagePaymentRequired() *GetV1CvesAllIPPagePaymentRequired {
	return &GetV1CvesAllIPPagePaymentRequired{}
}

/*
GetV1CvesAllIPPagePaymentRequired describes a response with status code 402, with default header values.

Payment Required
*/
type GetV1CvesAllIPPagePaymentRequired struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get v1 cves all Ip page payment required response has a 2xx status code
func (o *GetV1CvesAllIPPagePaymentRequired) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 cves all Ip page payment required response has a 3xx status code
func (o *GetV1CvesAllIPPagePaymentRequired) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 cves all Ip page payment required response has a 4xx status code
func (o *GetV1CvesAllIPPagePaymentRequired) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 cves all Ip page payment required response has a 5xx status code
func (o *GetV1CvesAllIPPagePaymentRequired) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 cves all Ip page payment required response a status code equal to that given
func (o *GetV1CvesAllIPPagePaymentRequired) IsCode(code int) bool {
	return code == 402
}

// Code gets the status code for the get v1 cves all Ip page payment required response
func (o *GetV1CvesAllIPPagePaymentRequired) Code() int {
	return 402
}

func (o *GetV1CvesAllIPPagePaymentRequired) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/cves/all/{ip}/{page}][%d] getV1CvesAllIpPagePaymentRequired %s", 402, payload)
}

func (o *GetV1CvesAllIPPagePaymentRequired) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/cves/all/{ip}/{page}][%d] getV1CvesAllIpPagePaymentRequired %s", 402, payload)
}

func (o *GetV1CvesAllIPPagePaymentRequired) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetV1CvesAllIPPagePaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1CvesAllIPPageRequestTimeout creates a GetV1CvesAllIPPageRequestTimeout with default headers values
func NewGetV1CvesAllIPPageRequestTimeout() *GetV1CvesAllIPPageRequestTimeout {
	return &GetV1CvesAllIPPageRequestTimeout{}
}

/*
GetV1CvesAllIPPageRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type GetV1CvesAllIPPageRequestTimeout struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get v1 cves all Ip page request timeout response has a 2xx status code
func (o *GetV1CvesAllIPPageRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 cves all Ip page request timeout response has a 3xx status code
func (o *GetV1CvesAllIPPageRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 cves all Ip page request timeout response has a 4xx status code
func (o *GetV1CvesAllIPPageRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 cves all Ip page request timeout response has a 5xx status code
func (o *GetV1CvesAllIPPageRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 cves all Ip page request timeout response a status code equal to that given
func (o *GetV1CvesAllIPPageRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the get v1 cves all Ip page request timeout response
func (o *GetV1CvesAllIPPageRequestTimeout) Code() int {
	return 408
}

func (o *GetV1CvesAllIPPageRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/cves/all/{ip}/{page}][%d] getV1CvesAllIpPageRequestTimeout %s", 408, payload)
}

func (o *GetV1CvesAllIPPageRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/cves/all/{ip}/{page}][%d] getV1CvesAllIpPageRequestTimeout %s", 408, payload)
}

func (o *GetV1CvesAllIPPageRequestTimeout) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetV1CvesAllIPPageRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1CvesAllIPPageInternalServerError creates a GetV1CvesAllIPPageInternalServerError with default headers values
func NewGetV1CvesAllIPPageInternalServerError() *GetV1CvesAllIPPageInternalServerError {
	return &GetV1CvesAllIPPageInternalServerError{}
}

/*
GetV1CvesAllIPPageInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetV1CvesAllIPPageInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get v1 cves all Ip page internal server error response has a 2xx status code
func (o *GetV1CvesAllIPPageInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 cves all Ip page internal server error response has a 3xx status code
func (o *GetV1CvesAllIPPageInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 cves all Ip page internal server error response has a 4xx status code
func (o *GetV1CvesAllIPPageInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get v1 cves all Ip page internal server error response has a 5xx status code
func (o *GetV1CvesAllIPPageInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get v1 cves all Ip page internal server error response a status code equal to that given
func (o *GetV1CvesAllIPPageInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get v1 cves all Ip page internal server error response
func (o *GetV1CvesAllIPPageInternalServerError) Code() int {
	return 500
}

func (o *GetV1CvesAllIPPageInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/cves/all/{ip}/{page}][%d] getV1CvesAllIpPageInternalServerError %s", 500, payload)
}

func (o *GetV1CvesAllIPPageInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/cves/all/{ip}/{page}][%d] getV1CvesAllIpPageInternalServerError %s", 500, payload)
}

func (o *GetV1CvesAllIPPageInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetV1CvesAllIPPageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
