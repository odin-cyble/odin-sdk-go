// Code generated by go-swagger; DO NOT EDIT.

package hosts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cybledev/odin-sdk-go/models"
)

// PostV1HostsSearchReader is a Reader for the PostV1HostsSearch structure.
type PostV1HostsSearchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostV1HostsSearchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostV1HostsSearchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostV1HostsSearchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 402:
		result := NewPostV1HostsSearchPaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostV1HostsSearchRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostV1HostsSearchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/hosts/search] PostV1HostsSearch", response, response.Code())
	}
}

// NewPostV1HostsSearchOK creates a PostV1HostsSearchOK with default headers values
func NewPostV1HostsSearchOK() *PostV1HostsSearchOK {
	return &PostV1HostsSearchOK{}
}

/*
PostV1HostsSearchOK describes a response with status code 200, with default header values.

OK
*/
type PostV1HostsSearchOK struct {
	Payload *PostV1HostsSearchOKBody
}

// IsSuccess returns true when this post v1 hosts search o k response has a 2xx status code
func (o *PostV1HostsSearchOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post v1 hosts search o k response has a 3xx status code
func (o *PostV1HostsSearchOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 hosts search o k response has a 4xx status code
func (o *PostV1HostsSearchOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v1 hosts search o k response has a 5xx status code
func (o *PostV1HostsSearchOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 hosts search o k response a status code equal to that given
func (o *PostV1HostsSearchOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post v1 hosts search o k response
func (o *PostV1HostsSearchOK) Code() int {
	return 200
}

func (o *PostV1HostsSearchOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/hosts/search][%d] postV1HostsSearchOK %s", 200, payload)
}

func (o *PostV1HostsSearchOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/hosts/search][%d] postV1HostsSearchOK %s", 200, payload)
}

func (o *PostV1HostsSearchOK) GetPayload() *PostV1HostsSearchOKBody {
	return o.Payload
}

func (o *PostV1HostsSearchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostV1HostsSearchOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1HostsSearchBadRequest creates a PostV1HostsSearchBadRequest with default headers values
func NewPostV1HostsSearchBadRequest() *PostV1HostsSearchBadRequest {
	return &PostV1HostsSearchBadRequest{}
}

/*
PostV1HostsSearchBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostV1HostsSearchBadRequest struct {
	Payload *PostV1HostsSearchBadRequestBody
}

// IsSuccess returns true when this post v1 hosts search bad request response has a 2xx status code
func (o *PostV1HostsSearchBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 hosts search bad request response has a 3xx status code
func (o *PostV1HostsSearchBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 hosts search bad request response has a 4xx status code
func (o *PostV1HostsSearchBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 hosts search bad request response has a 5xx status code
func (o *PostV1HostsSearchBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 hosts search bad request response a status code equal to that given
func (o *PostV1HostsSearchBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post v1 hosts search bad request response
func (o *PostV1HostsSearchBadRequest) Code() int {
	return 400
}

func (o *PostV1HostsSearchBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/hosts/search][%d] postV1HostsSearchBadRequest %s", 400, payload)
}

func (o *PostV1HostsSearchBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/hosts/search][%d] postV1HostsSearchBadRequest %s", 400, payload)
}

func (o *PostV1HostsSearchBadRequest) GetPayload() *PostV1HostsSearchBadRequestBody {
	return o.Payload
}

func (o *PostV1HostsSearchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostV1HostsSearchBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1HostsSearchPaymentRequired creates a PostV1HostsSearchPaymentRequired with default headers values
func NewPostV1HostsSearchPaymentRequired() *PostV1HostsSearchPaymentRequired {
	return &PostV1HostsSearchPaymentRequired{}
}

/*
PostV1HostsSearchPaymentRequired describes a response with status code 402, with default header values.

Payment Required
*/
type PostV1HostsSearchPaymentRequired struct {
	Payload *PostV1HostsSearchPaymentRequiredBody
}

// IsSuccess returns true when this post v1 hosts search payment required response has a 2xx status code
func (o *PostV1HostsSearchPaymentRequired) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 hosts search payment required response has a 3xx status code
func (o *PostV1HostsSearchPaymentRequired) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 hosts search payment required response has a 4xx status code
func (o *PostV1HostsSearchPaymentRequired) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 hosts search payment required response has a 5xx status code
func (o *PostV1HostsSearchPaymentRequired) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 hosts search payment required response a status code equal to that given
func (o *PostV1HostsSearchPaymentRequired) IsCode(code int) bool {
	return code == 402
}

// Code gets the status code for the post v1 hosts search payment required response
func (o *PostV1HostsSearchPaymentRequired) Code() int {
	return 402
}

func (o *PostV1HostsSearchPaymentRequired) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/hosts/search][%d] postV1HostsSearchPaymentRequired %s", 402, payload)
}

func (o *PostV1HostsSearchPaymentRequired) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/hosts/search][%d] postV1HostsSearchPaymentRequired %s", 402, payload)
}

func (o *PostV1HostsSearchPaymentRequired) GetPayload() *PostV1HostsSearchPaymentRequiredBody {
	return o.Payload
}

func (o *PostV1HostsSearchPaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostV1HostsSearchPaymentRequiredBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1HostsSearchRequestTimeout creates a PostV1HostsSearchRequestTimeout with default headers values
func NewPostV1HostsSearchRequestTimeout() *PostV1HostsSearchRequestTimeout {
	return &PostV1HostsSearchRequestTimeout{}
}

/*
PostV1HostsSearchRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type PostV1HostsSearchRequestTimeout struct {
	Payload *PostV1HostsSearchRequestTimeoutBody
}

// IsSuccess returns true when this post v1 hosts search request timeout response has a 2xx status code
func (o *PostV1HostsSearchRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 hosts search request timeout response has a 3xx status code
func (o *PostV1HostsSearchRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 hosts search request timeout response has a 4xx status code
func (o *PostV1HostsSearchRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 hosts search request timeout response has a 5xx status code
func (o *PostV1HostsSearchRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 hosts search request timeout response a status code equal to that given
func (o *PostV1HostsSearchRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the post v1 hosts search request timeout response
func (o *PostV1HostsSearchRequestTimeout) Code() int {
	return 408
}

func (o *PostV1HostsSearchRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/hosts/search][%d] postV1HostsSearchRequestTimeout %s", 408, payload)
}

func (o *PostV1HostsSearchRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/hosts/search][%d] postV1HostsSearchRequestTimeout %s", 408, payload)
}

func (o *PostV1HostsSearchRequestTimeout) GetPayload() *PostV1HostsSearchRequestTimeoutBody {
	return o.Payload
}

func (o *PostV1HostsSearchRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostV1HostsSearchRequestTimeoutBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1HostsSearchInternalServerError creates a PostV1HostsSearchInternalServerError with default headers values
func NewPostV1HostsSearchInternalServerError() *PostV1HostsSearchInternalServerError {
	return &PostV1HostsSearchInternalServerError{}
}

/*
PostV1HostsSearchInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostV1HostsSearchInternalServerError struct {
	Payload *PostV1HostsSearchInternalServerErrorBody
}

// IsSuccess returns true when this post v1 hosts search internal server error response has a 2xx status code
func (o *PostV1HostsSearchInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 hosts search internal server error response has a 3xx status code
func (o *PostV1HostsSearchInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 hosts search internal server error response has a 4xx status code
func (o *PostV1HostsSearchInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v1 hosts search internal server error response has a 5xx status code
func (o *PostV1HostsSearchInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post v1 hosts search internal server error response a status code equal to that given
func (o *PostV1HostsSearchInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post v1 hosts search internal server error response
func (o *PostV1HostsSearchInternalServerError) Code() int {
	return 500
}

func (o *PostV1HostsSearchInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/hosts/search][%d] postV1HostsSearchInternalServerError %s", 500, payload)
}

func (o *PostV1HostsSearchInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/hosts/search][%d] postV1HostsSearchInternalServerError %s", 500, payload)
}

func (o *PostV1HostsSearchInternalServerError) GetPayload() *PostV1HostsSearchInternalServerErrorBody {
	return o.Payload
}

func (o *PostV1HostsSearchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostV1HostsSearchInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostV1HostsSearchBadRequestBody post v1 hosts search bad request body
swagger:model PostV1HostsSearchBadRequestBody
*/
type PostV1HostsSearchBadRequestBody struct {
	models.ErrorResponse

	// error
	Error string `json:" error,omitempty"`

	// success
	Success bool `json:"success,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostV1HostsSearchBadRequestBody) UnmarshalJSON(raw []byte) error {
	// PostV1HostsSearchBadRequestBodyAO0
	var postV1HostsSearchBadRequestBodyAO0 models.ErrorResponse
	if err := swag.ReadJSON(raw, &postV1HostsSearchBadRequestBodyAO0); err != nil {
		return err
	}
	o.ErrorResponse = postV1HostsSearchBadRequestBodyAO0

	// PostV1HostsSearchBadRequestBodyAO1
	var dataPostV1HostsSearchBadRequestBodyAO1 struct {
		Error string `json:" error,omitempty"`

		Success bool `json:"success,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostV1HostsSearchBadRequestBodyAO1); err != nil {
		return err
	}

	o.Error = dataPostV1HostsSearchBadRequestBodyAO1.Error

	o.Success = dataPostV1HostsSearchBadRequestBodyAO1.Success

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostV1HostsSearchBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postV1HostsSearchBadRequestBodyAO0, err := swag.WriteJSON(o.ErrorResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postV1HostsSearchBadRequestBodyAO0)
	var dataPostV1HostsSearchBadRequestBodyAO1 struct {
		Error string `json:" error,omitempty"`

		Success bool `json:"success,omitempty"`
	}

	dataPostV1HostsSearchBadRequestBodyAO1.Error = o.Error

	dataPostV1HostsSearchBadRequestBodyAO1.Success = o.Success

	jsonDataPostV1HostsSearchBadRequestBodyAO1, errPostV1HostsSearchBadRequestBodyAO1 := swag.WriteJSON(dataPostV1HostsSearchBadRequestBodyAO1)
	if errPostV1HostsSearchBadRequestBodyAO1 != nil {
		return nil, errPostV1HostsSearchBadRequestBodyAO1
	}
	_parts = append(_parts, jsonDataPostV1HostsSearchBadRequestBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post v1 hosts search bad request body
func (o *PostV1HostsSearchBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ErrorResponse
	if err := o.ErrorResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this post v1 hosts search bad request body based on the context it is used
func (o *PostV1HostsSearchBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ErrorResponse
	if err := o.ErrorResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostV1HostsSearchBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostV1HostsSearchBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostV1HostsSearchBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostV1HostsSearchInternalServerErrorBody post v1 hosts search internal server error body
swagger:model PostV1HostsSearchInternalServerErrorBody
*/
type PostV1HostsSearchInternalServerErrorBody struct {
	models.ErrorResponse

	// error
	Error string `json:" error,omitempty"`

	// success
	Success bool `json:"success,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostV1HostsSearchInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// PostV1HostsSearchInternalServerErrorBodyAO0
	var postV1HostsSearchInternalServerErrorBodyAO0 models.ErrorResponse
	if err := swag.ReadJSON(raw, &postV1HostsSearchInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.ErrorResponse = postV1HostsSearchInternalServerErrorBodyAO0

	// PostV1HostsSearchInternalServerErrorBodyAO1
	var dataPostV1HostsSearchInternalServerErrorBodyAO1 struct {
		Error string `json:" error,omitempty"`

		Success bool `json:"success,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostV1HostsSearchInternalServerErrorBodyAO1); err != nil {
		return err
	}

	o.Error = dataPostV1HostsSearchInternalServerErrorBodyAO1.Error

	o.Success = dataPostV1HostsSearchInternalServerErrorBodyAO1.Success

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostV1HostsSearchInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postV1HostsSearchInternalServerErrorBodyAO0, err := swag.WriteJSON(o.ErrorResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postV1HostsSearchInternalServerErrorBodyAO0)
	var dataPostV1HostsSearchInternalServerErrorBodyAO1 struct {
		Error string `json:" error,omitempty"`

		Success bool `json:"success,omitempty"`
	}

	dataPostV1HostsSearchInternalServerErrorBodyAO1.Error = o.Error

	dataPostV1HostsSearchInternalServerErrorBodyAO1.Success = o.Success

	jsonDataPostV1HostsSearchInternalServerErrorBodyAO1, errPostV1HostsSearchInternalServerErrorBodyAO1 := swag.WriteJSON(dataPostV1HostsSearchInternalServerErrorBodyAO1)
	if errPostV1HostsSearchInternalServerErrorBodyAO1 != nil {
		return nil, errPostV1HostsSearchInternalServerErrorBodyAO1
	}
	_parts = append(_parts, jsonDataPostV1HostsSearchInternalServerErrorBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post v1 hosts search internal server error body
func (o *PostV1HostsSearchInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ErrorResponse
	if err := o.ErrorResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this post v1 hosts search internal server error body based on the context it is used
func (o *PostV1HostsSearchInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ErrorResponse
	if err := o.ErrorResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostV1HostsSearchInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostV1HostsSearchInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PostV1HostsSearchInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostV1HostsSearchOKBody post v1 hosts search o k body
swagger:model PostV1HostsSearchOKBody
*/
type PostV1HostsSearchOKBody struct {
	models.APIResponse

	// data
	Data []*models.IpservicesIPSummaryData `json:" data"`

	// pagination
	Pagination *models.SearchPagination `json:"pagination,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostV1HostsSearchOKBody) UnmarshalJSON(raw []byte) error {
	// PostV1HostsSearchOKBodyAO0
	var postV1HostsSearchOKBodyAO0 models.APIResponse
	if err := swag.ReadJSON(raw, &postV1HostsSearchOKBodyAO0); err != nil {
		return err
	}
	o.APIResponse = postV1HostsSearchOKBodyAO0

	// PostV1HostsSearchOKBodyAO1
	var dataPostV1HostsSearchOKBodyAO1 struct {
		Data []*models.IpservicesIPSummaryData `json:" data"`

		Pagination *models.SearchPagination `json:"pagination,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostV1HostsSearchOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostV1HostsSearchOKBodyAO1.Data

	o.Pagination = dataPostV1HostsSearchOKBodyAO1.Pagination

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostV1HostsSearchOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postV1HostsSearchOKBodyAO0, err := swag.WriteJSON(o.APIResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postV1HostsSearchOKBodyAO0)
	var dataPostV1HostsSearchOKBodyAO1 struct {
		Data []*models.IpservicesIPSummaryData `json:" data"`

		Pagination *models.SearchPagination `json:"pagination,omitempty"`
	}

	dataPostV1HostsSearchOKBodyAO1.Data = o.Data

	dataPostV1HostsSearchOKBodyAO1.Pagination = o.Pagination

	jsonDataPostV1HostsSearchOKBodyAO1, errPostV1HostsSearchOKBodyAO1 := swag.WriteJSON(dataPostV1HostsSearchOKBodyAO1)
	if errPostV1HostsSearchOKBodyAO1 != nil {
		return nil, errPostV1HostsSearchOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostV1HostsSearchOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post v1 hosts search o k body
func (o *PostV1HostsSearchOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.APIResponse
	if err := o.APIResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostV1HostsSearchOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postV1HostsSearchOK" + "." + " data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postV1HostsSearchOK" + "." + " data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PostV1HostsSearchOKBody) validatePagination(formats strfmt.Registry) error {

	if swag.IsZero(o.Pagination) { // not required
		return nil
	}

	if o.Pagination != nil {
		if err := o.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postV1HostsSearchOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postV1HostsSearchOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post v1 hosts search o k body based on the context it is used
func (o *PostV1HostsSearchOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.APIResponse
	if err := o.APIResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostV1HostsSearchOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {

			if swag.IsZero(o.Data[i]) { // not required
				return nil
			}

			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postV1HostsSearchOK" + "." + " data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postV1HostsSearchOK" + "." + " data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PostV1HostsSearchOKBody) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if o.Pagination != nil {

		if swag.IsZero(o.Pagination) { // not required
			return nil
		}

		if err := o.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postV1HostsSearchOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postV1HostsSearchOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostV1HostsSearchOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostV1HostsSearchOKBody) UnmarshalBinary(b []byte) error {
	var res PostV1HostsSearchOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostV1HostsSearchPaymentRequiredBody post v1 hosts search payment required body
swagger:model PostV1HostsSearchPaymentRequiredBody
*/
type PostV1HostsSearchPaymentRequiredBody struct {
	models.ErrorResponse

	// error
	Error string `json:" error,omitempty"`

	// success
	Success bool `json:"success,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostV1HostsSearchPaymentRequiredBody) UnmarshalJSON(raw []byte) error {
	// PostV1HostsSearchPaymentRequiredBodyAO0
	var postV1HostsSearchPaymentRequiredBodyAO0 models.ErrorResponse
	if err := swag.ReadJSON(raw, &postV1HostsSearchPaymentRequiredBodyAO0); err != nil {
		return err
	}
	o.ErrorResponse = postV1HostsSearchPaymentRequiredBodyAO0

	// PostV1HostsSearchPaymentRequiredBodyAO1
	var dataPostV1HostsSearchPaymentRequiredBodyAO1 struct {
		Error string `json:" error,omitempty"`

		Success bool `json:"success,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostV1HostsSearchPaymentRequiredBodyAO1); err != nil {
		return err
	}

	o.Error = dataPostV1HostsSearchPaymentRequiredBodyAO1.Error

	o.Success = dataPostV1HostsSearchPaymentRequiredBodyAO1.Success

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostV1HostsSearchPaymentRequiredBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postV1HostsSearchPaymentRequiredBodyAO0, err := swag.WriteJSON(o.ErrorResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postV1HostsSearchPaymentRequiredBodyAO0)
	var dataPostV1HostsSearchPaymentRequiredBodyAO1 struct {
		Error string `json:" error,omitempty"`

		Success bool `json:"success,omitempty"`
	}

	dataPostV1HostsSearchPaymentRequiredBodyAO1.Error = o.Error

	dataPostV1HostsSearchPaymentRequiredBodyAO1.Success = o.Success

	jsonDataPostV1HostsSearchPaymentRequiredBodyAO1, errPostV1HostsSearchPaymentRequiredBodyAO1 := swag.WriteJSON(dataPostV1HostsSearchPaymentRequiredBodyAO1)
	if errPostV1HostsSearchPaymentRequiredBodyAO1 != nil {
		return nil, errPostV1HostsSearchPaymentRequiredBodyAO1
	}
	_parts = append(_parts, jsonDataPostV1HostsSearchPaymentRequiredBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post v1 hosts search payment required body
func (o *PostV1HostsSearchPaymentRequiredBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ErrorResponse
	if err := o.ErrorResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this post v1 hosts search payment required body based on the context it is used
func (o *PostV1HostsSearchPaymentRequiredBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ErrorResponse
	if err := o.ErrorResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostV1HostsSearchPaymentRequiredBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostV1HostsSearchPaymentRequiredBody) UnmarshalBinary(b []byte) error {
	var res PostV1HostsSearchPaymentRequiredBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostV1HostsSearchRequestTimeoutBody post v1 hosts search request timeout body
swagger:model PostV1HostsSearchRequestTimeoutBody
*/
type PostV1HostsSearchRequestTimeoutBody struct {
	models.ErrorResponse

	// error
	Error string `json:" error,omitempty"`

	// success
	Success bool `json:"success,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostV1HostsSearchRequestTimeoutBody) UnmarshalJSON(raw []byte) error {
	// PostV1HostsSearchRequestTimeoutBodyAO0
	var postV1HostsSearchRequestTimeoutBodyAO0 models.ErrorResponse
	if err := swag.ReadJSON(raw, &postV1HostsSearchRequestTimeoutBodyAO0); err != nil {
		return err
	}
	o.ErrorResponse = postV1HostsSearchRequestTimeoutBodyAO0

	// PostV1HostsSearchRequestTimeoutBodyAO1
	var dataPostV1HostsSearchRequestTimeoutBodyAO1 struct {
		Error string `json:" error,omitempty"`

		Success bool `json:"success,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostV1HostsSearchRequestTimeoutBodyAO1); err != nil {
		return err
	}

	o.Error = dataPostV1HostsSearchRequestTimeoutBodyAO1.Error

	o.Success = dataPostV1HostsSearchRequestTimeoutBodyAO1.Success

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostV1HostsSearchRequestTimeoutBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postV1HostsSearchRequestTimeoutBodyAO0, err := swag.WriteJSON(o.ErrorResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postV1HostsSearchRequestTimeoutBodyAO0)
	var dataPostV1HostsSearchRequestTimeoutBodyAO1 struct {
		Error string `json:" error,omitempty"`

		Success bool `json:"success,omitempty"`
	}

	dataPostV1HostsSearchRequestTimeoutBodyAO1.Error = o.Error

	dataPostV1HostsSearchRequestTimeoutBodyAO1.Success = o.Success

	jsonDataPostV1HostsSearchRequestTimeoutBodyAO1, errPostV1HostsSearchRequestTimeoutBodyAO1 := swag.WriteJSON(dataPostV1HostsSearchRequestTimeoutBodyAO1)
	if errPostV1HostsSearchRequestTimeoutBodyAO1 != nil {
		return nil, errPostV1HostsSearchRequestTimeoutBodyAO1
	}
	_parts = append(_parts, jsonDataPostV1HostsSearchRequestTimeoutBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post v1 hosts search request timeout body
func (o *PostV1HostsSearchRequestTimeoutBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ErrorResponse
	if err := o.ErrorResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this post v1 hosts search request timeout body based on the context it is used
func (o *PostV1HostsSearchRequestTimeoutBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ErrorResponse
	if err := o.ErrorResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostV1HostsSearchRequestTimeoutBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostV1HostsSearchRequestTimeoutBody) UnmarshalBinary(b []byte) error {
	var res PostV1HostsSearchRequestTimeoutBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
