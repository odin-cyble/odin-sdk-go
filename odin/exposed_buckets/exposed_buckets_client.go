// Code generated by go-swagger; DO NOT EDIT.

package exposed_buckets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new exposed buckets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new exposed buckets API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new exposed buckets API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for exposed buckets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	PostV1ExposedBucketsCount(params *PostV1ExposedBucketsCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1ExposedBucketsCountOK, error)

	PostV1ExposedBucketsSearch(params *PostV1ExposedBucketsSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1ExposedBucketsSearchOK, error)

	PostV1ExposedBucketsSummary(params *PostV1ExposedBucketsSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1ExposedBucketsSummaryOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
PostV1ExposedBucketsCount gets exposed bucket count

Get exposed bucket count according to provided filters
*/
func (a *Client) PostV1ExposedBucketsCount(params *PostV1ExposedBucketsCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1ExposedBucketsCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ExposedBucketsCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1ExposedBucketsCount",
		Method:             "POST",
		PathPattern:        "/v1/exposed/buckets/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1ExposedBucketsCountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1ExposedBucketsCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1ExposedBucketsCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	PostV1ExposedBucketsSearch searches exposed buckets

	Search exposed buckets according to provided filters

Search across categories {img, aud, vid, font, doc, src, web, bkup, dbdump}
Search across labels {credential, financial, pii, legal, ip, medical, hr, report, confidential, backup, compromised, vulnerable}
Search across providers {aws, gcp, do, linode}
*/
func (a *Client) PostV1ExposedBucketsSearch(params *PostV1ExposedBucketsSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1ExposedBucketsSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ExposedBucketsSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1ExposedBucketsSearch",
		Method:             "POST",
		PathPattern:        "/v1/exposed/buckets/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1ExposedBucketsSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1ExposedBucketsSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1ExposedBucketsSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1ExposedBucketsSummary gets exposed buckets summary

Get Returns exposed buckets aggregated count according to filters
*/
func (a *Client) PostV1ExposedBucketsSummary(params *PostV1ExposedBucketsSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1ExposedBucketsSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ExposedBucketsSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1ExposedBucketsSummary",
		Method:             "POST",
		PathPattern:        "/v1/exposed/buckets/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1ExposedBucketsSummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1ExposedBucketsSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1ExposedBucketsSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
