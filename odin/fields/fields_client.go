// Code generated by go-swagger; DO NOT EDIT.

package fields

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new fields API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new fields API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new fields API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for fields API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetV1FieldsCertificatesCategory(params *GetV1FieldsCertificatesCategoryParams, opts ...ClientOption) (*GetV1FieldsCertificatesCategoryOK, error)

	GetV1FieldsExposedBuckets(params *GetV1FieldsExposedBucketsParams, opts ...ClientOption) (*GetV1FieldsExposedBucketsOK, error)

	GetV1FieldsExposedFiles(params *GetV1FieldsExposedFilesParams, opts ...ClientOption) (*GetV1FieldsExposedFilesOK, error)

	GetV1FieldsHostsCategory(params *GetV1FieldsHostsCategoryParams, opts ...ClientOption) (*GetV1FieldsHostsCategoryOK, error)

	GetV2FieldsHostsCategory(params *GetV2FieldsHostsCategoryParams, opts ...ClientOption) (*GetV2FieldsHostsCategoryOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetV1FieldsCertificatesCategory gets the fields for certificates

Get the list of fields to query upon certificates
*/
func (a *Client) GetV1FieldsCertificatesCategory(params *GetV1FieldsCertificatesCategoryParams, opts ...ClientOption) (*GetV1FieldsCertificatesCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1FieldsCertificatesCategoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1FieldsCertificatesCategory",
		Method:             "GET",
		PathPattern:        "/v1/fields/certificates/{category}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1FieldsCertificatesCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1FieldsCertificatesCategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1FieldsCertificatesCategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1FieldsExposedBuckets gets the fields for exposed

Get the list of fields that can be used to query on exposed buckets and files
*/
func (a *Client) GetV1FieldsExposedBuckets(params *GetV1FieldsExposedBucketsParams, opts ...ClientOption) (*GetV1FieldsExposedBucketsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1FieldsExposedBucketsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1FieldsExposedBuckets",
		Method:             "GET",
		PathPattern:        "/v1/fields/exposed/buckets/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1FieldsExposedBucketsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1FieldsExposedBucketsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1FieldsExposedBuckets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1FieldsExposedFiles gets the fields data

Returns the fields data
*/
func (a *Client) GetV1FieldsExposedFiles(params *GetV1FieldsExposedFilesParams, opts ...ClientOption) (*GetV1FieldsExposedFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1FieldsExposedFilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1FieldsExposedFiles",
		Method:             "GET",
		PathPattern:        "/v1/fields/exposed/files/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1FieldsExposedFilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1FieldsExposedFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1FieldsExposedFiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1FieldsHostsCategory gets the fields for hosts

Get the list of fields to query on host
*/
func (a *Client) GetV1FieldsHostsCategory(params *GetV1FieldsHostsCategoryParams, opts ...ClientOption) (*GetV1FieldsHostsCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1FieldsHostsCategoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1FieldsHostsCategory",
		Method:             "GET",
		PathPattern:        "/v1/fields/hosts/{category}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1FieldsHostsCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1FieldsHostsCategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1FieldsHostsCategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV2FieldsHostsCategory gets the fields for hosts v2

Get the list of fields to query on hosts v2
*/
func (a *Client) GetV2FieldsHostsCategory(params *GetV2FieldsHostsCategoryParams, opts ...ClientOption) (*GetV2FieldsHostsCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV2FieldsHostsCategoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV2FieldsHostsCategory",
		Method:             "GET",
		PathPattern:        "/v2/fields/hosts/{category}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV2FieldsHostsCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV2FieldsHostsCategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV2FieldsHostsCategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
