// Code generated by go-swagger; DO NOT EDIT.

package fields

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cybledev/odin-sdk-go/models"
)

// GetV1FieldsCertificatesCategoryReader is a Reader for the GetV1FieldsCertificatesCategory structure.
type GetV1FieldsCertificatesCategoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetV1FieldsCertificatesCategoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetV1FieldsCertificatesCategoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetV1FieldsCertificatesCategoryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 402:
		result := NewGetV1FieldsCertificatesCategoryPaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetV1FieldsCertificatesCategoryRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetV1FieldsCertificatesCategoryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/fields/certificates/{category}/] GetV1FieldsCertificatesCategory", response, response.Code())
	}
}

// NewGetV1FieldsCertificatesCategoryOK creates a GetV1FieldsCertificatesCategoryOK with default headers values
func NewGetV1FieldsCertificatesCategoryOK() *GetV1FieldsCertificatesCategoryOK {
	return &GetV1FieldsCertificatesCategoryOK{}
}

/*
GetV1FieldsCertificatesCategoryOK describes a response with status code 200, with default header values.

OK
*/
type GetV1FieldsCertificatesCategoryOK struct {
	Payload *GetV1FieldsCertificatesCategoryOKBody
}

// IsSuccess returns true when this get v1 fields certificates category o k response has a 2xx status code
func (o *GetV1FieldsCertificatesCategoryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get v1 fields certificates category o k response has a 3xx status code
func (o *GetV1FieldsCertificatesCategoryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 fields certificates category o k response has a 4xx status code
func (o *GetV1FieldsCertificatesCategoryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get v1 fields certificates category o k response has a 5xx status code
func (o *GetV1FieldsCertificatesCategoryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 fields certificates category o k response a status code equal to that given
func (o *GetV1FieldsCertificatesCategoryOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get v1 fields certificates category o k response
func (o *GetV1FieldsCertificatesCategoryOK) Code() int {
	return 200
}

func (o *GetV1FieldsCertificatesCategoryOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/fields/certificates/{category}/][%d] getV1FieldsCertificatesCategoryOK %s", 200, payload)
}

func (o *GetV1FieldsCertificatesCategoryOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/fields/certificates/{category}/][%d] getV1FieldsCertificatesCategoryOK %s", 200, payload)
}

func (o *GetV1FieldsCertificatesCategoryOK) GetPayload() *GetV1FieldsCertificatesCategoryOKBody {
	return o.Payload
}

func (o *GetV1FieldsCertificatesCategoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetV1FieldsCertificatesCategoryOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1FieldsCertificatesCategoryBadRequest creates a GetV1FieldsCertificatesCategoryBadRequest with default headers values
func NewGetV1FieldsCertificatesCategoryBadRequest() *GetV1FieldsCertificatesCategoryBadRequest {
	return &GetV1FieldsCertificatesCategoryBadRequest{}
}

/*
GetV1FieldsCertificatesCategoryBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetV1FieldsCertificatesCategoryBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get v1 fields certificates category bad request response has a 2xx status code
func (o *GetV1FieldsCertificatesCategoryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 fields certificates category bad request response has a 3xx status code
func (o *GetV1FieldsCertificatesCategoryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 fields certificates category bad request response has a 4xx status code
func (o *GetV1FieldsCertificatesCategoryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 fields certificates category bad request response has a 5xx status code
func (o *GetV1FieldsCertificatesCategoryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 fields certificates category bad request response a status code equal to that given
func (o *GetV1FieldsCertificatesCategoryBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get v1 fields certificates category bad request response
func (o *GetV1FieldsCertificatesCategoryBadRequest) Code() int {
	return 400
}

func (o *GetV1FieldsCertificatesCategoryBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/fields/certificates/{category}/][%d] getV1FieldsCertificatesCategoryBadRequest %s", 400, payload)
}

func (o *GetV1FieldsCertificatesCategoryBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/fields/certificates/{category}/][%d] getV1FieldsCertificatesCategoryBadRequest %s", 400, payload)
}

func (o *GetV1FieldsCertificatesCategoryBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetV1FieldsCertificatesCategoryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1FieldsCertificatesCategoryPaymentRequired creates a GetV1FieldsCertificatesCategoryPaymentRequired with default headers values
func NewGetV1FieldsCertificatesCategoryPaymentRequired() *GetV1FieldsCertificatesCategoryPaymentRequired {
	return &GetV1FieldsCertificatesCategoryPaymentRequired{}
}

/*
GetV1FieldsCertificatesCategoryPaymentRequired describes a response with status code 402, with default header values.

Payment Required
*/
type GetV1FieldsCertificatesCategoryPaymentRequired struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get v1 fields certificates category payment required response has a 2xx status code
func (o *GetV1FieldsCertificatesCategoryPaymentRequired) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 fields certificates category payment required response has a 3xx status code
func (o *GetV1FieldsCertificatesCategoryPaymentRequired) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 fields certificates category payment required response has a 4xx status code
func (o *GetV1FieldsCertificatesCategoryPaymentRequired) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 fields certificates category payment required response has a 5xx status code
func (o *GetV1FieldsCertificatesCategoryPaymentRequired) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 fields certificates category payment required response a status code equal to that given
func (o *GetV1FieldsCertificatesCategoryPaymentRequired) IsCode(code int) bool {
	return code == 402
}

// Code gets the status code for the get v1 fields certificates category payment required response
func (o *GetV1FieldsCertificatesCategoryPaymentRequired) Code() int {
	return 402
}

func (o *GetV1FieldsCertificatesCategoryPaymentRequired) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/fields/certificates/{category}/][%d] getV1FieldsCertificatesCategoryPaymentRequired %s", 402, payload)
}

func (o *GetV1FieldsCertificatesCategoryPaymentRequired) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/fields/certificates/{category}/][%d] getV1FieldsCertificatesCategoryPaymentRequired %s", 402, payload)
}

func (o *GetV1FieldsCertificatesCategoryPaymentRequired) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetV1FieldsCertificatesCategoryPaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1FieldsCertificatesCategoryRequestTimeout creates a GetV1FieldsCertificatesCategoryRequestTimeout with default headers values
func NewGetV1FieldsCertificatesCategoryRequestTimeout() *GetV1FieldsCertificatesCategoryRequestTimeout {
	return &GetV1FieldsCertificatesCategoryRequestTimeout{}
}

/*
GetV1FieldsCertificatesCategoryRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type GetV1FieldsCertificatesCategoryRequestTimeout struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get v1 fields certificates category request timeout response has a 2xx status code
func (o *GetV1FieldsCertificatesCategoryRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 fields certificates category request timeout response has a 3xx status code
func (o *GetV1FieldsCertificatesCategoryRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 fields certificates category request timeout response has a 4xx status code
func (o *GetV1FieldsCertificatesCategoryRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 fields certificates category request timeout response has a 5xx status code
func (o *GetV1FieldsCertificatesCategoryRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 fields certificates category request timeout response a status code equal to that given
func (o *GetV1FieldsCertificatesCategoryRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the get v1 fields certificates category request timeout response
func (o *GetV1FieldsCertificatesCategoryRequestTimeout) Code() int {
	return 408
}

func (o *GetV1FieldsCertificatesCategoryRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/fields/certificates/{category}/][%d] getV1FieldsCertificatesCategoryRequestTimeout %s", 408, payload)
}

func (o *GetV1FieldsCertificatesCategoryRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/fields/certificates/{category}/][%d] getV1FieldsCertificatesCategoryRequestTimeout %s", 408, payload)
}

func (o *GetV1FieldsCertificatesCategoryRequestTimeout) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetV1FieldsCertificatesCategoryRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1FieldsCertificatesCategoryInternalServerError creates a GetV1FieldsCertificatesCategoryInternalServerError with default headers values
func NewGetV1FieldsCertificatesCategoryInternalServerError() *GetV1FieldsCertificatesCategoryInternalServerError {
	return &GetV1FieldsCertificatesCategoryInternalServerError{}
}

/*
GetV1FieldsCertificatesCategoryInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetV1FieldsCertificatesCategoryInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get v1 fields certificates category internal server error response has a 2xx status code
func (o *GetV1FieldsCertificatesCategoryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 fields certificates category internal server error response has a 3xx status code
func (o *GetV1FieldsCertificatesCategoryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 fields certificates category internal server error response has a 4xx status code
func (o *GetV1FieldsCertificatesCategoryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get v1 fields certificates category internal server error response has a 5xx status code
func (o *GetV1FieldsCertificatesCategoryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get v1 fields certificates category internal server error response a status code equal to that given
func (o *GetV1FieldsCertificatesCategoryInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get v1 fields certificates category internal server error response
func (o *GetV1FieldsCertificatesCategoryInternalServerError) Code() int {
	return 500
}

func (o *GetV1FieldsCertificatesCategoryInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/fields/certificates/{category}/][%d] getV1FieldsCertificatesCategoryInternalServerError %s", 500, payload)
}

func (o *GetV1FieldsCertificatesCategoryInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/fields/certificates/{category}/][%d] getV1FieldsCertificatesCategoryInternalServerError %s", 500, payload)
}

func (o *GetV1FieldsCertificatesCategoryInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetV1FieldsCertificatesCategoryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetV1FieldsCertificatesCategoryOKBody get v1 fields certificates category o k body
swagger:model GetV1FieldsCertificatesCategoryOKBody
*/
type GetV1FieldsCertificatesCategoryOKBody struct {
	models.APIResponse

	// data
	Data []*models.Field `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetV1FieldsCertificatesCategoryOKBody) UnmarshalJSON(raw []byte) error {
	// GetV1FieldsCertificatesCategoryOKBodyAO0
	var getV1FieldsCertificatesCategoryOKBodyAO0 models.APIResponse
	if err := swag.ReadJSON(raw, &getV1FieldsCertificatesCategoryOKBodyAO0); err != nil {
		return err
	}
	o.APIResponse = getV1FieldsCertificatesCategoryOKBodyAO0

	// GetV1FieldsCertificatesCategoryOKBodyAO1
	var dataGetV1FieldsCertificatesCategoryOKBodyAO1 struct {
		Data []*models.Field `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataGetV1FieldsCertificatesCategoryOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetV1FieldsCertificatesCategoryOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetV1FieldsCertificatesCategoryOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getV1FieldsCertificatesCategoryOKBodyAO0, err := swag.WriteJSON(o.APIResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getV1FieldsCertificatesCategoryOKBodyAO0)
	var dataGetV1FieldsCertificatesCategoryOKBodyAO1 struct {
		Data []*models.Field `json:"data"`
	}

	dataGetV1FieldsCertificatesCategoryOKBodyAO1.Data = o.Data

	jsonDataGetV1FieldsCertificatesCategoryOKBodyAO1, errGetV1FieldsCertificatesCategoryOKBodyAO1 := swag.WriteJSON(dataGetV1FieldsCertificatesCategoryOKBodyAO1)
	if errGetV1FieldsCertificatesCategoryOKBodyAO1 != nil {
		return nil, errGetV1FieldsCertificatesCategoryOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetV1FieldsCertificatesCategoryOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get v1 fields certificates category o k body
func (o *GetV1FieldsCertificatesCategoryOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.APIResponse
	if err := o.APIResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetV1FieldsCertificatesCategoryOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getV1FieldsCertificatesCategoryOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getV1FieldsCertificatesCategoryOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get v1 fields certificates category o k body based on the context it is used
func (o *GetV1FieldsCertificatesCategoryOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.APIResponse
	if err := o.APIResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetV1FieldsCertificatesCategoryOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {

			if swag.IsZero(o.Data[i]) { // not required
				return nil
			}

			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getV1FieldsCertificatesCategoryOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getV1FieldsCertificatesCategoryOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetV1FieldsCertificatesCategoryOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetV1FieldsCertificatesCategoryOKBody) UnmarshalBinary(b []byte) error {
	var res GetV1FieldsCertificatesCategoryOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
